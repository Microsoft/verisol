# Generated from .\Compiler\CelestialParser.g4 by ANTLR 4.8
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3|")
        buf.write("\u03b5\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\3\2\7\2N\n\2\f\2\16\2Q\13\2\3\2\3\2\3\3\3\3\3\4\3\4")
        buf.write("\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5")
        buf.write("\4f\n\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5")
        buf.write("\4s\n\4\3\4\3\4\3\4\7\4x\n\4\f\4\16\4{\13\4\3\5\3\5\3")
        buf.write("\5\7\5\u0080\n\5\f\5\16\5\u0083\13\5\3\6\3\6\3\6\3\6\3")
        buf.write("\7\3\7\3\7\3\7\3\b\3\b\6\b\u008f\n\b\r\b\16\b\u0090\3")
        buf.write("\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u009d\n\t\3")
        buf.write("\n\3\n\3\n\3\n\3\n\3\n\7\n\u00a5\n\n\f\n\16\n\u00a8\13")
        buf.write("\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\7\13\u00b6\n\13\f\13\16\13\u00b9\13\13\3\13\3\13")
        buf.write("\3\f\3\f\3\f\3\f\5\f\u00c1\n\f\3\f\3\f\3\f\3\r\3\r\3\r")
        buf.write("\7\r\u00c9\n\r\f\r\16\r\u00cc\13\r\3\16\3\16\3\16\3\17")
        buf.write("\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\21\3\21\3\21\3\21")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\7\22\u00e3\n\22\f\22\16")
        buf.write("\22\u00e6\13\22\5\22\u00e8\n\22\3\22\3\22\3\22\3\23\3")
        buf.write("\23\3\23\5\23\u00f0\n\23\3\23\3\23\5\23\u00f4\n\23\3\23")
        buf.write("\3\23\3\23\3\23\5\23\u00fa\n\23\3\23\5\23\u00fd\n\23\3")
        buf.write("\23\3\23\3\23\5\23\u0102\n\23\3\23\5\23\u0105\n\23\3\23")
        buf.write("\3\23\3\24\3\24\5\24\u010b\n\24\3\24\3\24\5\24\u010f\n")
        buf.write("\24\3\24\5\24\u0112\n\24\3\24\5\24\u0115\n\24\3\24\3\24")
        buf.write("\5\24\u0119\n\24\3\24\3\24\5\24\u011d\n\24\3\24\5\24\u0120")
        buf.write("\n\24\3\24\5\24\u0123\n\24\3\24\3\24\5\24\u0127\n\24\3")
        buf.write("\24\3\24\5\24\u012b\n\24\3\24\3\24\5\24\u012f\n\24\3\24")
        buf.write("\3\24\5\24\u0133\n\24\3\24\3\24\5\24\u0137\n\24\3\24\3")
        buf.write("\24\5\24\u013b\n\24\3\24\5\24\u013e\n\24\3\24\5\24\u0141")
        buf.write("\n\24\3\24\3\24\5\24\u0145\n\24\3\24\3\24\5\24\u0149\n")
        buf.write("\24\3\24\3\24\5\24\u014d\n\24\3\24\3\24\5\24\u0151\n\24")
        buf.write("\3\24\3\24\5\24\u0155\n\24\3\24\5\24\u0158\n\24\3\24\5")
        buf.write("\24\u015b\n\24\3\24\3\24\5\24\u015f\n\24\5\24\u0161\n")
        buf.write("\24\3\25\3\25\3\26\3\26\3\26\3\26\5\26\u0169\n\26\3\26")
        buf.write("\3\26\5\26\u016d\n\26\3\26\3\26\5\26\u0171\n\26\3\26\5")
        buf.write("\26\u0174\n\26\3\26\3\26\3\26\3\26\5\26\u017a\n\26\3\26")
        buf.write("\5\26\u017d\n\26\3\26\3\26\3\26\5\26\u0182\n\26\3\26\5")
        buf.write("\26\u0185\n\26\3\26\3\26\3\26\3\26\5\26\u018b\n\26\3\26")
        buf.write("\3\26\5\26\u018f\n\26\3\26\3\26\3\27\3\27\3\27\7\27\u0196")
        buf.write("\n\27\f\27\16\27\u0199\13\27\3\30\3\30\3\30\3\31\3\31")
        buf.write("\3\31\7\31\u01a1\n\31\f\31\16\31\u01a4\13\31\3\31\3\31")
        buf.write("\3\31\3\32\3\32\5\32\u01ab\n\32\3\32\3\32\3\33\3\33\3")
        buf.write("\33\3\33\5\33\u01b3\n\33\3\33\3\33\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\34\3\34\3\34\3\34\5\34\u01c0\n\34\3\35\3\35\7")
        buf.write("\35\u01c4\n\35\f\35\16\35\u01c7\13\35\3\35\3\35\3\35\3")
        buf.write("\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u01de\n\35\3")
        buf.write("\35\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u01e7\n\35\3\35")
        buf.write("\3\35\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u01f1\n\35\3")
        buf.write("\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\3\35\5\35\u0218\n\35\3\35\3\35\3\35\3")
        buf.write("\35\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u0224\n\35\3\35")
        buf.write("\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\35\5\35\u0234\n\35\3\35\3\35\3\35\3\35\3\35\7")
        buf.write("\35\u023b\n\35\f\35\16\35\u023e\13\35\3\35\3\35\3\35\3")
        buf.write("\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u024b\n\35")
        buf.write("\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\3\35\3\35\7\35\u0268\n\35\f\35\16\35\u026b")
        buf.write("\13\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u0275")
        buf.write("\n\35\3\35\3\35\5\35\u0279\n\35\3\36\3\36\3\36\3\37\3")
        buf.write("\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\7\37")
        buf.write("\u0289\n\37\f\37\16\37\u028c\13\37\3 \3 \3 \3 \3 \3 \7")
        buf.write(" \u0294\n \f \16 \u0297\13 \3 \3 \3 \3 \3 \3 \3 \3 \3")
        buf.write(" \3 \5 \u02a3\n \3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\5!\u02b0")
        buf.write("\n!\3!\3!\3!\3!\3!\5!\u02b7\n!\3!\3!\3!\3!\3!\3!\3!\3")
        buf.write("!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3")
        buf.write("!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3")
        buf.write("!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3")
        buf.write("!\3!\3!\5!\u02f9\n!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\5!\u0305")
        buf.write("\n!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3")
        buf.write("!\3!\3!\3!\3!\7!\u031c\n!\f!\16!\u031f\13!\3!\3!\3!\3")
        buf.write("!\3!\3!\3!\3!\3!\5!\u032a\n!\3!\3!\3!\3!\3!\3!\3!\3!\3")
        buf.write("!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3")
        buf.write("!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\7!\u0356")
        buf.write("\n!\f!\16!\u0359\13!\7!\u035b\n!\f!\16!\u035e\13!\3\"")
        buf.write("\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3")
        buf.write("\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"")
        buf.write("\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3")
        buf.write("\"\5\"\u038a\n\"\3#\3#\3#\3#\3#\3#\6#\u0392\n#\r#\16#")
        buf.write("\u0393\5#\u0396\n#\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3")
        buf.write("$\3$\6$\u03a5\n$\r$\16$\u03a6\5$\u03a9\n$\3%\3%\3%\7%")
        buf.write("\u03ae\n%\f%\16%\u03b1\13%\3&\3&\3&\2\5\6<@\'\2\4\6\b")
        buf.write("\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668")
        buf.write(":<>@BDFHJ\2\n\3\2<=\5\2\33\33>>UU\4\2ZZkk\3\2ln\3\2jk")
        buf.write("\4\2++be\3\2`a\3\2^_\2\u0441\2O\3\2\2\2\4T\3\2\2\2\6r")
        buf.write("\3\2\2\2\b|\3\2\2\2\n\u0084\3\2\2\2\f\u0088\3\2\2\2\16")
        buf.write("\u008c\3\2\2\2\20\u009c\3\2\2\2\22\u009e\3\2\2\2\24\u00ab")
        buf.write("\3\2\2\2\26\u00bc\3\2\2\2\30\u00c5\3\2\2\2\32\u00cd\3")
        buf.write("\2\2\2\34\u00d0\3\2\2\2\36\u00d4\3\2\2\2 \u00d8\3\2\2")
        buf.write("\2\"\u00dc\3\2\2\2$\u00ec\3\2\2\2&\u0160\3\2\2\2(\u0162")
        buf.write("\3\2\2\2*\u0168\3\2\2\2,\u0192\3\2\2\2.\u019a\3\2\2\2")
        buf.write("\60\u019d\3\2\2\2\62\u01a8\3\2\2\2\64\u01ae\3\2\2\2\66")
        buf.write("\u01bf\3\2\2\28\u0278\3\2\2\2:\u027a\3\2\2\2<\u027d\3")
        buf.write("\2\2\2>\u02a2\3\2\2\2@\u0329\3\2\2\2B\u0389\3\2\2\2D\u0395")
        buf.write("\3\2\2\2F\u03a8\3\2\2\2H\u03aa\3\2\2\2J\u03b2\3\2\2\2")
        buf.write("LN\5\f\7\2ML\3\2\2\2NQ\3\2\2\2OM\3\2\2\2OP\3\2\2\2PR\3")
        buf.write("\2\2\2QO\3\2\2\2RS\7\2\2\3S\3\3\2\2\2TU\7y\2\2U\5\3\2")
        buf.write("\2\2VW\b\4\1\2WX\7\16\2\2XY\7s\2\2YZ\5\6\4\2Z[\7]\2\2")
        buf.write("[\\\5\6\4\2\\]\7t\2\2]s\3\2\2\2^s\7\4\2\2_s\7\13\2\2`")
        buf.write("s\7\b\2\2as\7\t\2\2bs\7\f\2\2ce\7\3\2\2df\7\67\2\2ed\3")
        buf.write("\2\2\2ef\3\2\2\2fs\3\2\2\2gs\7\7\2\2hs\7\6\2\2is\5\4\3")
        buf.write("\2jk\7\n\2\2kl\7d\2\2lm\5\4\3\2mn\7e\2\2ns\3\2\2\2os\7")
        buf.write("\17\2\2ps\7\20\2\2qs\7\21\2\2rV\3\2\2\2r^\3\2\2\2r_\3")
        buf.write("\2\2\2r`\3\2\2\2ra\3\2\2\2rb\3\2\2\2rc\3\2\2\2rg\3\2\2")
        buf.write("\2rh\3\2\2\2ri\3\2\2\2rj\3\2\2\2ro\3\2\2\2rp\3\2\2\2r")
        buf.write("q\3\2\2\2sy\3\2\2\2tu\f\21\2\2uv\7q\2\2vx\7r\2\2wt\3\2")
        buf.write("\2\2x{\3\2\2\2yw\3\2\2\2yz\3\2\2\2z\7\3\2\2\2{y\3\2\2")
        buf.write("\2|\u0081\5\n\6\2}~\7v\2\2~\u0080\5\n\6\2\177}\3\2\2\2")
        buf.write("\u0080\u0083\3\2\2\2\u0081\177\3\2\2\2\u0081\u0082\3\2")
        buf.write("\2\2\u0082\t\3\2\2\2\u0083\u0081\3\2\2\2\u0084\u0085\5")
        buf.write("\4\3\2\u0085\u0086\7x\2\2\u0086\u0087\5\6\4\2\u0087\13")
        buf.write("\3\2\2\2\u0088\u0089\7\r\2\2\u0089\u008a\5\4\3\2\u008a")
        buf.write("\u008b\5\16\b\2\u008b\r\3\2\2\2\u008c\u008e\7o\2\2\u008d")
        buf.write("\u008f\5\20\t\2\u008e\u008d\3\2\2\2\u008f\u0090\3\2\2")
        buf.write("\2\u0090\u008e\3\2\2\2\u0090\u0091\3\2\2\2\u0091\u0092")
        buf.write("\3\2\2\2\u0092\u0093\7p\2\2\u0093\17\3\2\2\2\u0094\u009d")
        buf.write("\5\64\33\2\u0095\u009d\5\22\n\2\u0096\u009d\5\24\13\2")
        buf.write("\u0097\u009d\5\26\f\2\u0098\u009d\5\36\20\2\u0099\u009d")
        buf.write("\5\"\22\2\u009a\u009d\5$\23\2\u009b\u009d\5*\26\2\u009c")
        buf.write("\u0094\3\2\2\2\u009c\u0095\3\2\2\2\u009c\u0096\3\2\2\2")
        buf.write("\u009c\u0097\3\2\2\2\u009c\u0098\3\2\2\2\u009c\u0099\3")
        buf.write("\2\2\2\u009c\u009a\3\2\2\2\u009c\u009b\3\2\2\2\u009d\21")
        buf.write("\3\2\2\2\u009e\u009f\7\5\2\2\u009f\u00a0\5\4\3\2\u00a0")
        buf.write("\u00a1\7o\2\2\u00a1\u00a6\5\4\3\2\u00a2\u00a3\7v\2\2\u00a3")
        buf.write("\u00a5\5\4\3\2\u00a4\u00a2\3\2\2\2\u00a5\u00a8\3\2\2\2")
        buf.write("\u00a6\u00a4\3\2\2\2\u00a6\u00a7\3\2\2\2\u00a7\u00a9\3")
        buf.write("\2\2\2\u00a8\u00a6\3\2\2\2\u00a9\u00aa\7p\2\2\u00aa\23")
        buf.write("\3\2\2\2\u00ab\u00ac\7M\2\2\u00ac\u00ad\5\4\3\2\u00ad")
        buf.write("\u00ae\7o\2\2\u00ae\u00af\5\6\4\2\u00af\u00b0\5\4\3\2")
        buf.write("\u00b0\u00b7\7u\2\2\u00b1\u00b2\5\6\4\2\u00b2\u00b3\5")
        buf.write("\4\3\2\u00b3\u00b4\7u\2\2\u00b4\u00b6\3\2\2\2\u00b5\u00b1")
        buf.write("\3\2\2\2\u00b6\u00b9\3\2\2\2\u00b7\u00b5\3\2\2\2\u00b7")
        buf.write("\u00b8\3\2\2\2\u00b8\u00ba\3\2\2\2\u00b9\u00b7\3\2\2\2")
        buf.write("\u00ba\u00bb\7p\2\2\u00bb\25\3\2\2\2\u00bc\u00bd\7L\2")
        buf.write("\2\u00bd\u00be\5\4\3\2\u00be\u00c0\7s\2\2\u00bf\u00c1")
        buf.write("\5\30\r\2\u00c0\u00bf\3\2\2\2\u00c0\u00c1\3\2\2\2\u00c1")
        buf.write("\u00c2\3\2\2\2\u00c2\u00c3\7t\2\2\u00c3\u00c4\5\34\17")
        buf.write("\2\u00c4\27\3\2\2\2\u00c5\u00ca\5\32\16\2\u00c6\u00c7")
        buf.write("\7v\2\2\u00c7\u00c9\5\32\16\2\u00c8\u00c6\3\2\2\2\u00c9")
        buf.write("\u00cc\3\2\2\2\u00ca\u00c8\3\2\2\2\u00ca\u00cb\3\2\2\2")
        buf.write("\u00cb\31\3\2\2\2\u00cc\u00ca\3\2\2\2\u00cd\u00ce\5\6")
        buf.write("\4\2\u00ce\u00cf\5\4\3\2\u00cf\33\3\2\2\2\u00d0\u00d1")
        buf.write("\7o\2\2\u00d1\u00d2\5@!\2\u00d2\u00d3\7p\2\2\u00d3\35")
        buf.write("\3\2\2\2\u00d4\u00d5\7/\2\2\u00d5\u00d6\5\4\3\2\u00d6")
        buf.write("\u00d7\5 \21\2\u00d7\37\3\2\2\2\u00d8\u00d9\7o\2\2\u00d9")
        buf.write("\u00da\5@!\2\u00da\u00db\7p\2\2\u00db!\3\2\2\2\u00dc\u00dd")
        buf.write("\7\6\2\2\u00dd\u00de\5\4\3\2\u00de\u00e7\7s\2\2\u00df")
        buf.write("\u00e4\5\6\4\2\u00e0\u00e1\7v\2\2\u00e1\u00e3\5\6\4\2")
        buf.write("\u00e2\u00e0\3\2\2\2\u00e3\u00e6\3\2\2\2\u00e4\u00e2\3")
        buf.write("\2\2\2\u00e4\u00e5\3\2\2\2\u00e5\u00e8\3\2\2\2\u00e6\u00e4")
        buf.write("\3\2\2\2\u00e7\u00df\3\2\2\2\u00e7\u00e8\3\2\2\2\u00e8")
        buf.write("\u00e9\3\2\2\2\u00e9\u00ea\7t\2\2\u00ea\u00eb\7u\2\2\u00eb")
        buf.write("#\3\2\2\2\u00ec\u00ed\7\34\2\2\u00ed\u00ef\7s\2\2\u00ee")
        buf.write("\u00f0\5,\27\2\u00ef\u00ee\3\2\2\2\u00ef\u00f0\3\2\2\2")
        buf.write("\u00f0\u00f1\3\2\2\2\u00f1\u00f3\7t\2\2\u00f2\u00f4\t")
        buf.write("\2\2\2\u00f3\u00f2\3\2\2\2\u00f3\u00f4\3\2\2\2\u00f4\u00f5")
        buf.write("\3\2\2\2\u00f5\u00fc\5&\24\2\u00f6\u00f7\7\64\2\2\u00f7")
        buf.write("\u00f9\7q\2\2\u00f8\u00fa\5H%\2\u00f9\u00f8\3\2\2\2\u00f9")
        buf.write("\u00fa\3\2\2\2\u00fa\u00fb\3\2\2\2\u00fb\u00fd\7r\2\2")
        buf.write("\u00fc\u00f6\3\2\2\2\u00fc\u00fd\3\2\2\2\u00fd\u0104\3")
        buf.write("\2\2\2\u00fe\u00ff\7\65\2\2\u00ff\u0101\7q\2\2\u0100\u0102")
        buf.write("\5H%\2\u0101\u0100\3\2\2\2\u0101\u0102\3\2\2\2\u0102\u0103")
        buf.write("\3\2\2\2\u0103\u0105\7r\2\2\u0104\u00fe\3\2\2\2\u0104")
        buf.write("\u0105\3\2\2\2\u0105\u0106\3\2\2\2\u0106\u0107\5\60\31")
        buf.write("\2\u0107%\3\2\2\2\u0108\u0109\7:\2\2\u0109\u010b\5@!\2")
        buf.write("\u010a\u0108\3\2\2\2\u010a\u010b\3\2\2\2\u010b\u010e\3")
        buf.write("\2\2\2\u010c\u010d\79\2\2\u010d\u010f\5@!\2\u010e\u010c")
        buf.write("\3\2\2\2\u010e\u010f\3\2\2\2\u010f\u0111\3\2\2\2\u0110")
        buf.write("\u0112\7\36\2\2\u0111\u0110\3\2\2\2\u0111\u0112\3\2\2")
        buf.write("\2\u0112\u0114\3\2\2\2\u0113\u0115\7\37\2\2\u0114\u0113")
        buf.write("\3\2\2\2\u0114\u0115\3\2\2\2\u0115\u0118\3\2\2\2\u0116")
        buf.write("\u0117\7P\2\2\u0117\u0119\5@!\2\u0118\u0116\3\2\2\2\u0118")
        buf.write("\u0119\3\2\2\2\u0119\u011c\3\2\2\2\u011a\u011b\7D\2\2")
        buf.write("\u011b\u011d\5@!\2\u011c\u011a\3\2\2\2\u011c\u011d\3\2")
        buf.write("\2\2\u011d\u0161\3\2\2\2\u011e\u0120\7\36\2\2\u011f\u011e")
        buf.write("\3\2\2\2\u011f\u0120\3\2\2\2\u0120\u0122\3\2\2\2\u0121")
        buf.write("\u0123\7\37\2\2\u0122\u0121\3\2\2\2\u0122\u0123\3\2\2")
        buf.write("\2\u0123\u0126\3\2\2\2\u0124\u0125\7:\2\2\u0125\u0127")
        buf.write("\5@!\2\u0126\u0124\3\2\2\2\u0126\u0127\3\2\2\2\u0127\u012a")
        buf.write("\3\2\2\2\u0128\u0129\79\2\2\u0129\u012b\5@!\2\u012a\u0128")
        buf.write("\3\2\2\2\u012a\u012b\3\2\2\2\u012b\u012e\3\2\2\2\u012c")
        buf.write("\u012d\7P\2\2\u012d\u012f\5@!\2\u012e\u012c\3\2\2\2\u012e")
        buf.write("\u012f\3\2\2\2\u012f\u0132\3\2\2\2\u0130\u0131\7D\2\2")
        buf.write("\u0131\u0133\5@!\2\u0132\u0130\3\2\2\2\u0132\u0133\3\2")
        buf.write("\2\2\u0133\u0161\3\2\2\2\u0134\u0135\7:\2\2\u0135\u0137")
        buf.write("\5@!\2\u0136\u0134\3\2\2\2\u0136\u0137\3\2\2\2\u0137\u013a")
        buf.write("\3\2\2\2\u0138\u0139\7P\2\2\u0139\u013b\5@!\2\u013a\u0138")
        buf.write("\3\2\2\2\u013a\u013b\3\2\2\2\u013b\u013d\3\2\2\2\u013c")
        buf.write("\u013e\7\36\2\2\u013d\u013c\3\2\2\2\u013d\u013e\3\2\2")
        buf.write("\2\u013e\u0140\3\2\2\2\u013f\u0141\7\37\2\2\u0140\u013f")
        buf.write("\3\2\2\2\u0140\u0141\3\2\2\2\u0141\u0144\3\2\2\2\u0142")
        buf.write("\u0143\79\2\2\u0143\u0145\5@!\2\u0144\u0142\3\2\2\2\u0144")
        buf.write("\u0145\3\2\2\2\u0145\u0148\3\2\2\2\u0146\u0147\7D\2\2")
        buf.write("\u0147\u0149\5@!\2\u0148\u0146\3\2\2\2\u0148\u0149\3\2")
        buf.write("\2\2\u0149\u0161\3\2\2\2\u014a\u014b\7:\2\2\u014b\u014d")
        buf.write("\5@!\2\u014c\u014a\3\2\2\2\u014c\u014d\3\2\2\2\u014d\u0150")
        buf.write("\3\2\2\2\u014e\u014f\7P\2\2\u014f\u0151\5@!\2\u0150\u014e")
        buf.write("\3\2\2\2\u0150\u0151\3\2\2\2\u0151\u0154\3\2\2\2\u0152")
        buf.write("\u0153\79\2\2\u0153\u0155\5@!\2\u0154\u0152\3\2\2\2\u0154")
        buf.write("\u0155\3\2\2\2\u0155\u0157\3\2\2\2\u0156\u0158\7\36\2")
        buf.write("\2\u0157\u0156\3\2\2\2\u0157\u0158\3\2\2\2\u0158\u015a")
        buf.write("\3\2\2\2\u0159\u015b\7\37\2\2\u015a\u0159\3\2\2\2\u015a")
        buf.write("\u015b\3\2\2\2\u015b\u015e\3\2\2\2\u015c\u015d\7D\2\2")
        buf.write("\u015d\u015f\5@!\2\u015e\u015c\3\2\2\2\u015e\u015f\3\2")
        buf.write("\2\2\u015f\u0161\3\2\2\2\u0160\u010a\3\2\2\2\u0160\u011f")
        buf.write("\3\2\2\2\u0160\u0136\3\2\2\2\u0160\u014c\3\2\2\2\u0161")
        buf.write("\'\3\2\2\2\u0162\u0163\t\3\2\2\u0163)\3\2\2\2\u0164\u0169")
        buf.write("\7@\2\2\u0165\u0169\7&\2\2\u0166\u0167\7)\2\2\u0167\u0169")
        buf.write("\5\4\3\2\u0168\u0164\3\2\2\2\u0168\u0165\3\2\2\2\u0168")
        buf.write("\u0166\3\2\2\2\u0169\u016a\3\2\2\2\u016a\u016c\7s\2\2")
        buf.write("\u016b\u016d\5,\27\2\u016c\u016b\3\2\2\2\u016c\u016d\3")
        buf.write("\2\2\2\u016d\u016e\3\2\2\2\u016e\u0170\7t\2\2\u016f\u0171")
        buf.write("\t\2\2\2\u0170\u016f\3\2\2\2\u0170\u0171\3\2\2\2\u0171")
        buf.write("\u0173\3\2\2\2\u0172\u0174\5(\25\2\u0173\u0172\3\2\2\2")
        buf.write("\u0173\u0174\3\2\2\2\u0174\u0175\3\2\2\2\u0175\u017c\5")
        buf.write("&\24\2\u0176\u0177\7\64\2\2\u0177\u0179\7q\2\2\u0178\u017a")
        buf.write("\5H%\2\u0179\u0178\3\2\2\2\u0179\u017a\3\2\2\2\u017a\u017b")
        buf.write("\3\2\2\2\u017b\u017d\7r\2\2\u017c\u0176\3\2\2\2\u017c")
        buf.write("\u017d\3\2\2\2\u017d\u0184\3\2\2\2\u017e\u017f\7\65\2")
        buf.write("\2\u017f\u0181\7q\2\2\u0180\u0182\5H%\2\u0181\u0180\3")
        buf.write("\2\2\2\u0181\u0182\3\2\2\2\u0182\u0183\3\2\2\2\u0183\u0185")
        buf.write("\7r\2\2\u0184\u017e\3\2\2\2\u0184\u0185\3\2\2\2\u0185")
        buf.write("\u018e\3\2\2\2\u0186\u0187\7B\2\2\u0187\u0188\7s\2\2\u0188")
        buf.write("\u018a\5\6\4\2\u0189\u018b\5\4\3\2\u018a\u0189\3\2\2\2")
        buf.write("\u018a\u018b\3\2\2\2\u018b\u018c\3\2\2\2\u018c\u018d\7")
        buf.write("t\2\2\u018d\u018f\3\2\2\2\u018e\u0186\3\2\2\2\u018e\u018f")
        buf.write("\3\2\2\2\u018f\u0190\3\2\2\2\u0190\u0191\5\60\31\2\u0191")
        buf.write("+\3\2\2\2\u0192\u0197\5.\30\2\u0193\u0194\7v\2\2\u0194")
        buf.write("\u0196\5.\30\2\u0195\u0193\3\2\2\2\u0196\u0199\3\2\2\2")
        buf.write("\u0197\u0195\3\2\2\2\u0197\u0198\3\2\2\2\u0198-\3\2\2")
        buf.write("\2\u0199\u0197\3\2\2\2\u019a\u019b\5\6\4\2\u019b\u019c")
        buf.write("\5\4\3\2\u019c/\3\2\2\2\u019d\u01a2\7o\2\2\u019e\u01a1")
        buf.write("\5\64\33\2\u019f\u01a1\58\35\2\u01a0\u019e\3\2\2\2\u01a0")
        buf.write("\u019f\3\2\2\2\u01a1\u01a4\3\2\2\2\u01a2\u01a0\3\2\2\2")
        buf.write("\u01a2\u01a3\3\2\2\2\u01a3\u01a5\3\2\2\2\u01a4\u01a2\3")
        buf.write("\2\2\2\u01a5\u01a6\5\62\32\2\u01a6\u01a7\7p\2\2\u01a7")
        buf.write("\61\3\2\2\2\u01a8\u01aa\7A\2\2\u01a9\u01ab\5@!\2\u01aa")
        buf.write("\u01a9\3\2\2\2\u01aa\u01ab\3\2\2\2\u01ab\u01ac\3\2\2\2")
        buf.write("\u01ac\u01ad\7u\2\2\u01ad\63\3\2\2\2\u01ae\u01af\5\6\4")
        buf.write("\2\u01af\u01b2\5\4\3\2\u01b0\u01b1\7g\2\2\u01b1\u01b3")
        buf.write("\5@!\2\u01b2\u01b0\3\2\2\2\u01b2\u01b3\3\2\2\2\u01b3\u01b4")
        buf.write("\3\2\2\2\u01b4\u01b5\7u\2\2\u01b5\65\3\2\2\2\u01b6\u01b7")
        buf.write("\5\6\4\2\u01b7\u01b8\5\4\3\2\u01b8\u01b9\7g\2\2\u01b9")
        buf.write("\u01ba\5@!\2\u01ba\u01c0\3\2\2\2\u01bb\u01bc\5\4\3\2\u01bc")
        buf.write("\u01bd\7g\2\2\u01bd\u01be\5@!\2\u01be\u01c0\3\2\2\2\u01bf")
        buf.write("\u01b6\3\2\2\2\u01bf\u01bb\3\2\2\2\u01c0\67\3\2\2\2\u01c1")
        buf.write("\u01c5\7o\2\2\u01c2\u01c4\58\35\2\u01c3\u01c2\3\2\2\2")
        buf.write("\u01c4\u01c7\3\2\2\2\u01c5\u01c3\3\2\2\2\u01c5\u01c6\3")
        buf.write("\2\2\2\u01c6\u01c8\3\2\2\2\u01c7\u01c5\3\2\2\2\u01c8\u0279")
        buf.write("\7p\2\2\u01c9\u01ca\5<\37\2\u01ca\u01cb\7w\2\2\u01cb\u01cc")
        buf.write("\7?\2\2\u01cc\u01cd\7s\2\2\u01cd\u01ce\5@!\2\u01ce\u01cf")
        buf.write("\7t\2\2\u01cf\u01d0\7u\2\2\u01d0\u0279\3\2\2\2\u01d1\u01d2")
        buf.write("\5<\37\2\u01d2\u01d3\7w\2\2\u01d3\u01d4\78\2\2\u01d4\u01d5")
        buf.write("\7s\2\2\u01d5\u01d6\7t\2\2\u01d6\u01d7\7u\2\2\u01d7\u0279")
        buf.write("\3\2\2\2\u01d8\u01d9\7!\2\2\u01d9\u01da\7s\2\2\u01da\u01dd")
        buf.write("\5<\37\2\u01db\u01dc\7v\2\2\u01dc\u01de\5@!\2\u01dd\u01db")
        buf.write("\3\2\2\2\u01dd\u01de\3\2\2\2\u01de\u01df\3\2\2\2\u01df")
        buf.write("\u01e0\7t\2\2\u01e0\u01e1\7u\2\2\u01e1\u0279\3\2\2\2\u01e2")
        buf.write("\u01e3\7\23\2\2\u01e3\u01e6\5@!\2\u01e4\u01e5\7v\2\2\u01e5")
        buf.write("\u01e7\7Y\2\2\u01e6\u01e4\3\2\2\2\u01e6\u01e7\3\2\2\2")
        buf.write("\u01e7\u01e8\3\2\2\2\u01e8\u01e9\7u\2\2\u01e9\u0279\3")
        buf.write("\2\2\2\u01ea\u01eb\5<\37\2\u01eb\u01ec\7g\2\2\u01ec\u01ed")
        buf.write("\7\66\2\2\u01ed\u01ee\5\4\3\2\u01ee\u01f0\7s\2\2\u01ef")
        buf.write("\u01f1\5H%\2\u01f0\u01ef\3\2\2\2\u01f0\u01f1\3\2\2\2\u01f1")
        buf.write("\u01f2\3\2\2\2\u01f2\u01f3\7t\2\2\u01f3\u01f4\7u\2\2\u01f4")
        buf.write("\u0279\3\2\2\2\u01f5\u01f6\5@!\2\u01f6\u01f7\7w\2\2\u01f7")
        buf.write("\u01f8\7\32\2\2\u01f8\u01f9\7s\2\2\u01f9\u01fa\5H%\2\u01fa")
        buf.write("\u01fb\7t\2\2\u01fb\u01fc\7u\2\2\u01fc\u0279\3\2\2\2\u01fd")
        buf.write("\u01fe\7\4\2\2\u01fe\u01ff\5\4\3\2\u01ff\u0200\7g\2\2")
        buf.write("\u0200\u0201\5@!\2\u0201\u0202\7w\2\2\u0202\u0203\7\32")
        buf.write("\2\2\u0203\u0204\7s\2\2\u0204\u0205\5H%\2\u0205\u0206")
        buf.write("\7t\2\2\u0206\u0207\7u\2\2\u0207\u0279\3\2\2\2\u0208\u0209")
        buf.write("\5<\37\2\u0209\u020a\7g\2\2\u020a\u020b\5@!\2\u020b\u020c")
        buf.write("\7w\2\2\u020c\u020d\7\32\2\2\u020d\u020e\7s\2\2\u020e")
        buf.write("\u020f\5H%\2\u020f\u0210\7t\2\2\u0210\u0211\7u\2\2\u0211")
        buf.write("\u0279\3\2\2\2\u0212\u0213\5<\37\2\u0213\u0214\7w\2\2")
        buf.write("\u0214\u0215\5\4\3\2\u0215\u0217\7s\2\2\u0216\u0218\5")
        buf.write("H%\2\u0217\u0216\3\2\2\2\u0217\u0218\3\2\2\2\u0218\u0219")
        buf.write("\3\2\2\2\u0219\u021a\7t\2\2\u021a\u021b\7u\2\2\u021b\u0279")
        buf.write("\3\2\2\2\u021c\u021d\5<\37\2\u021d\u021e\7g\2\2\u021e")
        buf.write("\u021f\5<\37\2\u021f\u0220\7w\2\2\u0220\u0221\5\4\3\2")
        buf.write("\u0221\u0223\7s\2\2\u0222\u0224\5H%\2\u0223\u0222\3\2")
        buf.write("\2\2\u0223\u0224\3\2\2\2\u0224\u0225\3\2\2\2\u0225\u0226")
        buf.write("\7t\2\2\u0226\u0227\7u\2\2\u0227\u0279\3\2\2\2\u0228\u0229")
        buf.write("\5<\37\2\u0229\u022a\7g\2\2\u022a\u022b\5J&\2\u022b\u022c")
        buf.write("\7u\2\2\u022c\u0279\3\2\2\2\u022d\u022e\7*\2\2\u022e\u022f")
        buf.write("\7s\2\2\u022f\u0230\5@!\2\u0230\u0231\7t\2\2\u0231\u0233")
        buf.write("\58\35\2\u0232\u0234\5:\36\2\u0233\u0232\3\2\2\2\u0233")
        buf.write("\u0234\3\2\2\2\u0234\u0279\3\2\2\2\u0235\u0236\7\'\2\2")
        buf.write("\u0236\u0237\7s\2\2\u0237\u023c\5\66\34\2\u0238\u0239")
        buf.write("\7v\2\2\u0239\u023b\5\66\34\2\u023a\u0238\3\2\2\2\u023b")
        buf.write("\u023e\3\2\2\2\u023c\u023a\3\2\2\2\u023c\u023d\3\2\2\2")
        buf.write("\u023d\u023f\3\2\2\2\u023e\u023c\3\2\2\2\u023f\u0240\7")
        buf.write("u\2\2\u0240\u0241\5@!\2\u0241\u0242\7u\2\2\u0242\u0243")
        buf.write("\5@!\2\u0243\u0244\7u\2\2\u0244\u0245\7t\2\2\u0245\u0246")
        buf.write("\58\35\2\u0246\u0279\3\2\2\2\u0247\u0248\5\4\3\2\u0248")
        buf.write("\u024a\7s\2\2\u0249\u024b\5H%\2\u024a\u0249\3\2\2\2\u024a")
        buf.write("\u024b\3\2\2\2\u024b\u024c\3\2\2\2\u024c\u024d\7t\2\2")
        buf.write("\u024d\u024e\7u\2\2\u024e\u0279\3\2\2\2\u024f\u0250\7")
        buf.write("J\2\2\u0250\u0251\7s\2\2\u0251\u0252\5@!\2\u0252\u0253")
        buf.write("\7v\2\2\u0253\u0254\7$\2\2\u0254\u0255\7v\2\2\u0255\u0256")
        buf.write("\5@!\2\u0256\u0257\7t\2\2\u0257\u0258\7u\2\2\u0258\u0279")
        buf.write("\3\2\2\2\u0259\u025a\5@!\2\u025a\u025b\7w\2\2\u025b\u025c")
        buf.write("\7O\2\2\u025c\u025d\7s\2\2\u025d\u025e\5@!\2\u025e\u025f")
        buf.write("\7t\2\2\u025f\u0260\7u\2\2\u0260\u0279\3\2\2\2\u0261\u0262")
        buf.write("\7#\2\2\u0262\u0263\5\4\3\2\u0263\u0264\7s\2\2\u0264\u0269")
        buf.write("\5@!\2\u0265\u0266\7v\2\2\u0266\u0268\5@!\2\u0267\u0265")
        buf.write("\3\2\2\2\u0268\u026b\3\2\2\2\u0269\u0267\3\2\2\2\u0269")
        buf.write("\u026a\3\2\2\2\u026a\u026c\3\2\2\2\u026b\u0269\3\2\2\2")
        buf.write("\u026c\u026d\7t\2\2\u026d\u026e\7u\2\2\u026e\u0279\3\2")
        buf.write("\2\2\u026f\u0270\7C\2\2\u0270\u0271\7s\2\2\u0271\u0274")
        buf.write("\7Y\2\2\u0272\u0273\7v\2\2\u0273\u0275\5H%\2\u0274\u0272")
        buf.write("\3\2\2\2\u0274\u0275\3\2\2\2\u0275\u0276\3\2\2\2\u0276")
        buf.write("\u0277\7t\2\2\u0277\u0279\7u\2\2\u0278\u01c1\3\2\2\2\u0278")
        buf.write("\u01c9\3\2\2\2\u0278\u01d1\3\2\2\2\u0278\u01d8\3\2\2\2")
        buf.write("\u0278\u01e2\3\2\2\2\u0278\u01ea\3\2\2\2\u0278\u01f5\3")
        buf.write("\2\2\2\u0278\u01fd\3\2\2\2\u0278\u0208\3\2\2\2\u0278\u0212")
        buf.write("\3\2\2\2\u0278\u021c\3\2\2\2\u0278\u0228\3\2\2\2\u0278")
        buf.write("\u022d\3\2\2\2\u0278\u0235\3\2\2\2\u0278\u0247\3\2\2\2")
        buf.write("\u0278\u024f\3\2\2\2\u0278\u0259\3\2\2\2\u0278\u0261\3")
        buf.write("\2\2\2\u0278\u026f\3\2\2\2\u02799\3\2\2\2\u027a\u027b")
        buf.write("\7\"\2\2\u027b\u027c\58\35\2\u027c;\3\2\2\2\u027d\u027e")
        buf.write("\b\37\1\2\u027e\u027f\5\4\3\2\u027f\u028a\3\2\2\2\u0280")
        buf.write("\u0281\f\4\2\2\u0281\u0282\7w\2\2\u0282\u0289\5\4\3\2")
        buf.write("\u0283\u0284\f\3\2\2\u0284\u0285\7q\2\2\u0285\u0286\5")
        buf.write("@!\2\u0286\u0287\7r\2\2\u0287\u0289\3\2\2\2\u0288\u0280")
        buf.write("\3\2\2\2\u0288\u0283\3\2\2\2\u0289\u028c\3\2\2\2\u028a")
        buf.write("\u0288\3\2\2\2\u028a\u028b\3\2\2\2\u028b=\3\2\2\2\u028c")
        buf.write("\u028a\3\2\2\2\u028d\u028e\7s\2\2\u028e\u028f\5\4\3\2")
        buf.write("\u028f\u0290\7v\2\2\u0290\u0295\5@!\2\u0291\u0292\7v\2")
        buf.write("\2\u0292\u0294\5@!\2\u0293\u0291\3\2\2\2\u0294\u0297\3")
        buf.write("\2\2\2\u0295\u0293\3\2\2\2\u0295\u0296\3\2\2\2\u0296\u0298")
        buf.write("\3\2\2\2\u0297\u0295\3\2\2\2\u0298\u0299\7t\2\2\u0299")
        buf.write("\u02a3\3\2\2\2\u029a\u029b\7s\2\2\u029b\u029c\5@!\2\u029c")
        buf.write("\u029d\7v\2\2\u029d\u029e\7$\2\2\u029e\u029f\7v\2\2\u029f")
        buf.write("\u02a0\5@!\2\u02a0\u02a1\7t\2\2\u02a1\u02a3\3\2\2\2\u02a2")
        buf.write("\u028d\3\2\2\2\u02a2\u029a\3\2\2\2\u02a3?\3\2\2\2\u02a4")
        buf.write("\u02a5\b!\1\2\u02a5\u032a\5B\"\2\u02a6\u02a7\7s\2\2\u02a7")
        buf.write("\u02a8\5@!\2\u02a8\u02a9\7t\2\2\u02a9\u032a\3\2\2\2\u02aa")
        buf.write("\u02ab\5\4\3\2\u02ab\u02ac\7w\2\2\u02ac\u02ad\5\4\3\2")
        buf.write("\u02ad\u02af\7s\2\2\u02ae\u02b0\5H%\2\u02af\u02ae\3\2")
        buf.write("\2\2\u02af\u02b0\3\2\2\2\u02b0\u02b1\3\2\2\2\u02b1\u02b2")
        buf.write("\7t\2\2\u02b2\u032a\3\2\2\2\u02b3\u02b4\5\4\3\2\u02b4")
        buf.write("\u02b6\7s\2\2\u02b5\u02b7\5H%\2\u02b6\u02b5\3\2\2\2\u02b6")
        buf.write("\u02b7\3\2\2\2\u02b7\u02b8\3\2\2\2\u02b8\u02b9\7t\2\2")
        buf.write("\u02b9\u032a\3\2\2\2\u02ba\u02bb\7(\2\2\u02bb\u02bc\7")
        buf.write("s\2\2\u02bc\u02bd\5\30\r\2\u02bd\u02be\7t\2\2\u02be\u02bf")
        buf.write("\7s\2\2\u02bf\u02c0\5@!\2\u02c0\u02c1\7t\2\2\u02c1\u032a")
        buf.write("\3\2\2\2\u02c2\u02c3\7%\2\2\u02c3\u02c4\7s\2\2\u02c4\u02c5")
        buf.write("\5\30\r\2\u02c5\u02c6\7t\2\2\u02c6\u02c7\7s\2\2\u02c7")
        buf.write("\u02c8\5@!\2\u02c8\u02c9\7t\2\2\u02c9\u032a\3\2\2\2\u02ca")
        buf.write("\u02cb\t\4\2\2\u02cb\u032a\5@!\27\u02cc\u02cd\7G\2\2\u02cd")
        buf.write("\u02ce\7s\2\2\u02ce\u02cf\5@!\2\u02cf\u02d0\7v\2\2\u02d0")
        buf.write("\u02d1\5@!\2\u02d1\u02d2\7t\2\2\u02d2\u032a\3\2\2\2\u02d3")
        buf.write("\u02d4\7F\2\2\u02d4\u02d5\7s\2\2\u02d5\u02d6\5@!\2\u02d6")
        buf.write("\u02d7\7v\2\2\u02d7\u02d8\5@!\2\u02d8\u02d9\7t\2\2\u02d9")
        buf.write("\u032a\3\2\2\2\u02da\u02db\7H\2\2\u02db\u02dc\7s\2\2\u02dc")
        buf.write("\u02dd\5@!\2\u02dd\u02de\7v\2\2\u02de\u02df\5@!\2\u02df")
        buf.write("\u02e0\7t\2\2\u02e0\u032a\3\2\2\2\u02e1\u02e2\7E\2\2\u02e2")
        buf.write("\u02e3\7s\2\2\u02e3\u02e4\5@!\2\u02e4\u02e5\7v\2\2\u02e5")
        buf.write("\u02e6\5@!\2\u02e6\u02e7\7t\2\2\u02e7\u032a\3\2\2\2\u02e8")
        buf.write("\u02e9\7I\2\2\u02e9\u02ea\7s\2\2\u02ea\u02eb\5@!\2\u02eb")
        buf.write("\u02ec\7v\2\2\u02ec\u02ed\5@!\2\u02ed\u02ee\7t\2\2\u02ee")
        buf.write("\u032a\3\2\2\2\u02ef\u02f0\5\4\3\2\u02f0\u02f1\7s\2\2")
        buf.write("\u02f1\u02f2\5@!\2\u02f2\u02f3\7t\2\2\u02f3\u032a\3\2")
        buf.write("\2\2\u02f4\u02f5\7\66\2\2\u02f5\u02f6\5\4\3\2\u02f6\u02f8")
        buf.write("\7s\2\2\u02f7\u02f9\5H%\2\u02f8\u02f7\3\2\2\2\u02f8\u02f9")
        buf.write("\3\2\2\2\u02f9\u02fa\3\2\2\2\u02fa\u02fb\7t\2\2\u02fb")
        buf.write("\u032a\3\2\2\2\u02fc\u02fd\5\4\3\2\u02fd\u02fe\7w\2\2")
        buf.write("\u02fe\u02ff\7\22\2\2\u02ff\u0300\7s\2\2\u0300\u0301\7")
        buf.write("\66\2\2\u0301\u0302\5\4\3\2\u0302\u0304\7s\2\2\u0303\u0305")
        buf.write("\5H%\2\u0304\u0303\3\2\2\2\u0304\u0305\3\2\2\2\u0305\u0306")
        buf.write("\3\2\2\2\u0306\u0307\7t\2\2\u0307\u0308\7t\2\2\u0308\u032a")
        buf.write("\3\2\2\2\u0309\u030a\7.\2\2\u030a\u030b\7s\2\2\u030b\u030c")
        buf.write("\5@!\2\u030c\u030d\7v\2\2\u030d\u030e\5@!\2\u030e\u030f")
        buf.write("\7v\2\2\u030f\u0310\5@!\2\u0310\u0311\7t\2\2\u0311\u032a")
        buf.write("\3\2\2\2\u0312\u0313\7 \2\2\u0313\u0314\7s\2\2\u0314\u0315")
        buf.write("\5\6\4\2\u0315\u0316\7t\2\2\u0316\u032a\3\2\2\2\u0317")
        buf.write("\u031d\5> \2\u0318\u0319\7x\2\2\u0319\u031a\7x\2\2\u031a")
        buf.write("\u031c\5> \2\u031b\u0318\3\2\2\2\u031c\u031f\3\2\2\2\u031d")
        buf.write("\u031b\3\2\2\2\u031d\u031e\3\2\2\2\u031e\u0320\3\2\2\2")
        buf.write("\u031f\u031d\3\2\2\2\u0320\u0321\7x\2\2\u0321\u0322\7")
        buf.write("x\2\2\u0322\u0323\5B\"\2\u0323\u032a\3\2\2\2\u0324\u0325")
        buf.write("\7\67\2\2\u0325\u0326\7s\2\2\u0326\u0327\5@!\2\u0327\u0328")
        buf.write("\7t\2\2\u0328\u032a\3\2\2\2\u0329\u02a4\3\2\2\2\u0329")
        buf.write("\u02a6\3\2\2\2\u0329\u02aa\3\2\2\2\u0329\u02b3\3\2\2\2")
        buf.write("\u0329\u02ba\3\2\2\2\u0329\u02c2\3\2\2\2\u0329\u02ca\3")
        buf.write("\2\2\2\u0329\u02cc\3\2\2\2\u0329\u02d3\3\2\2\2\u0329\u02da")
        buf.write("\3\2\2\2\u0329\u02e1\3\2\2\2\u0329\u02e8\3\2\2\2\u0329")
        buf.write("\u02ef\3\2\2\2\u0329\u02f4\3\2\2\2\u0329\u02fc\3\2\2\2")
        buf.write("\u0329\u0309\3\2\2\2\u0329\u0312\3\2\2\2\u0329\u0317\3")
        buf.write("\2\2\2\u0329\u0324\3\2\2\2\u032a\u035c\3\2\2\2\u032b\u032c")
        buf.write("\f\26\2\2\u032c\u032d\t\5\2\2\u032d\u035b\5@!\27\u032e")
        buf.write("\u032f\f\22\2\2\u032f\u0330\t\6\2\2\u0330\u035b\5@!\23")
        buf.write("\u0331\u0332\f\17\2\2\u0332\u0333\t\7\2\2\u0333\u035b")
        buf.write("\5@!\20\u0334\u0335\f\16\2\2\u0335\u0336\t\b\2\2\u0336")
        buf.write("\u035b\5@!\17\u0337\u0338\f\r\2\2\u0338\u0339\7[\2\2\u0339")
        buf.write("\u035b\5@!\16\u033a\u033b\f\f\2\2\u033b\u033c\7\\\2\2")
        buf.write("\u033c\u035b\5@!\r\u033d\u033e\f\13\2\2\u033e\u033f\t")
        buf.write("\t\2\2\u033f\u035b\5@!\f\u0340\u0341\f\35\2\2\u0341\u0342")
        buf.write("\7w\2\2\u0342\u035b\5\4\3\2\u0343\u0344\f\34\2\2\u0344")
        buf.write("\u0345\7q\2\2\u0345\u0346\5@!\2\u0346\u0347\7r\2\2\u0347")
        buf.write("\u035b\3\2\2\2\u0348\u0349\f\33\2\2\u0349\u034a\7w\2\2")
        buf.write("\u034a\u034b\7\62\2\2\u034b\u034c\7s\2\2\u034c\u035b\7")
        buf.write("t\2\2\u034d\u034e\f\n\2\2\u034e\u034f\7]\2\2\u034f\u0357")
        buf.write("\5@!\2\u0350\u0351\7v\2\2\u0351\u0352\5@!\2\u0352\u0353")
        buf.write("\7]\2\2\u0353\u0354\5@!\2\u0354\u0356\3\2\2\2\u0355\u0350")
        buf.write("\3\2\2\2\u0356\u0359\3\2\2\2\u0357\u0355\3\2\2\2\u0357")
        buf.write("\u0358\3\2\2\2\u0358\u035b\3\2\2\2\u0359\u0357\3\2\2\2")
        buf.write("\u035a\u032b\3\2\2\2\u035a\u032e\3\2\2\2\u035a\u0331\3")
        buf.write("\2\2\2\u035a\u0334\3\2\2\2\u035a\u0337\3\2\2\2\u035a\u033a")
        buf.write("\3\2\2\2\u035a\u033d\3\2\2\2\u035a\u0340\3\2\2\2\u035a")
        buf.write("\u0343\3\2\2\2\u035a\u0348\3\2\2\2\u035a\u034d\3\2\2\2")
        buf.write("\u035b\u035e\3\2\2\2\u035c\u035a\3\2\2\2\u035c\u035d\3")
        buf.write("\2\2\2\u035dA\3\2\2\2\u035e\u035c\3\2\2\2\u035f\u038a")
        buf.write("\5\4\3\2\u0360\u038a\7T\2\2\u0361\u038a\7\24\2\2\u0362")
        buf.write("\u038a\7K\2\2\u0363\u038a\7Q\2\2\u0364\u038a\7R\2\2\u0365")
        buf.write("\u038a\7\25\2\2\u0366\u038a\7\26\2\2\u0367\u038a\7\27")
        buf.write("\2\2\u0368\u038a\7\30\2\2\u0369\u038a\7\31\2\2\u036a\u038a")
        buf.write("\7\63\2\2\u036b\u038a\7,\2\2\u036c\u038a\7-\2\2\u036d")
        buf.write("\u038a\7S\2\2\u036e\u036f\7\66\2\2\u036f\u0370\7s\2\2")
        buf.write("\u0370\u0371\5\4\3\2\u0371\u0372\7t\2\2\u0372\u038a\3")
        buf.write("\2\2\2\u0373\u0374\7\66\2\2\u0374\u0375\7s\2\2\u0375\u0376")
        buf.write("\7\24\2\2\u0376\u038a\7t\2\2\u0377\u0378\7\66\2\2\u0378")
        buf.write("\u0379\7s\2\2\u0379\u037a\7\63\2\2\u037a\u038a\7t\2\2")
        buf.write("\u037b\u038a\7V\2\2\u037c\u038a\7W\2\2\u037d\u038a\7X")
        buf.write("\2\2\u037e\u038a\7Y\2\2\u037f\u038a\7N\2\2\u0380\u0381")
        buf.write("\7\3\2\2\u0381\u0382\7s\2\2\u0382\u0383\7N\2\2\u0383\u038a")
        buf.write("\7t\2\2\u0384\u0385\7\3\2\2\u0385\u0386\7s\2\2\u0386\u0387")
        buf.write("\5\4\3\2\u0387\u0388\7t\2\2\u0388\u038a\3\2\2\2\u0389")
        buf.write("\u035f\3\2\2\2\u0389\u0360\3\2\2\2\u0389\u0361\3\2\2\2")
        buf.write("\u0389\u0362\3\2\2\2\u0389\u0363\3\2\2\2\u0389\u0364\3")
        buf.write("\2\2\2\u0389\u0365\3\2\2\2\u0389\u0366\3\2\2\2\u0389\u0367")
        buf.write("\3\2\2\2\u0389\u0368\3\2\2\2\u0389\u0369\3\2\2\2\u0389")
        buf.write("\u036a\3\2\2\2\u0389\u036b\3\2\2\2\u0389\u036c\3\2\2\2")
        buf.write("\u0389\u036d\3\2\2\2\u0389\u036e\3\2\2\2\u0389\u0373\3")
        buf.write("\2\2\2\u0389\u0377\3\2\2\2\u0389\u037b\3\2\2\2\u0389\u037c")
        buf.write("\3\2\2\2\u0389\u037d\3\2\2\2\u0389\u037e\3\2\2\2\u0389")
        buf.write("\u037f\3\2\2\2\u0389\u0380\3\2\2\2\u0389\u0384\3\2\2\2")
        buf.write("\u038aC\3\2\2\2\u038b\u038c\5J&\2\u038c\u038d\7v\2\2\u038d")
        buf.write("\u0396\3\2\2\2\u038e\u0391\5J&\2\u038f\u0390\7v\2\2\u0390")
        buf.write("\u0392\5J&\2\u0391\u038f\3\2\2\2\u0392\u0393\3\2\2\2\u0393")
        buf.write("\u0391\3\2\2\2\u0393\u0394\3\2\2\2\u0394\u0396\3\2\2\2")
        buf.write("\u0395\u038b\3\2\2\2\u0395\u038e\3\2\2\2\u0396E\3\2\2")
        buf.write("\2\u0397\u0398\5\4\3\2\u0398\u0399\7g\2\2\u0399\u039a")
        buf.write("\5J&\2\u039a\u039b\7v\2\2\u039b\u03a9\3\2\2\2\u039c\u039d")
        buf.write("\5\4\3\2\u039d\u039e\7g\2\2\u039e\u03a4\5J&\2\u039f\u03a0")
        buf.write("\7v\2\2\u03a0\u03a1\5\4\3\2\u03a1\u03a2\7g\2\2\u03a2\u03a3")
        buf.write("\5J&\2\u03a3\u03a5\3\2\2\2\u03a4\u039f\3\2\2\2\u03a5\u03a6")
        buf.write("\3\2\2\2\u03a6\u03a4\3\2\2\2\u03a6\u03a7\3\2\2\2\u03a7")
        buf.write("\u03a9\3\2\2\2\u03a8\u0397\3\2\2\2\u03a8\u039c\3\2\2\2")
        buf.write("\u03a9G\3\2\2\2\u03aa\u03af\5J&\2\u03ab\u03ac\7v\2\2\u03ac")
        buf.write("\u03ae\5J&\2\u03ad\u03ab\3\2\2\2\u03ae\u03b1\3\2\2\2\u03af")
        buf.write("\u03ad\3\2\2\2\u03af\u03b0\3\2\2\2\u03b0I\3\2\2\2\u03b1")
        buf.write("\u03af\3\2\2\2\u03b2\u03b3\5@!\2\u03b3K\3\2\2\2]Oery\u0081")
        buf.write("\u0090\u009c\u00a6\u00b7\u00c0\u00ca\u00e4\u00e7\u00ef")
        buf.write("\u00f3\u00f9\u00fc\u0101\u0104\u010a\u010e\u0111\u0114")
        buf.write("\u0118\u011c\u011f\u0122\u0126\u012a\u012e\u0132\u0136")
        buf.write("\u013a\u013d\u0140\u0144\u0148\u014c\u0150\u0154\u0157")
        buf.write("\u015a\u015e\u0160\u0168\u016c\u0170\u0173\u0179\u017c")
        buf.write("\u0181\u0184\u018a\u018e\u0197\u01a0\u01a2\u01aa\u01b2")
        buf.write("\u01bf\u01c5\u01dd\u01e6\u01f0\u0217\u0223\u0233\u023c")
        buf.write("\u024a\u0269\u0274\u0278\u0288\u028a\u0295\u02a2\u02af")
        buf.write("\u02b6\u02f8\u0304\u031d\u0329\u0357\u035a\u035c\u0389")
        buf.write("\u0393\u0395\u03a6\u03a8\u03af")
        return buf.getvalue()


class CelestialParser ( Parser ):

    grammarFileName = "CelestialParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'address'", "'bool'", "'enum'", "'event'", 
                     "'eventlog'", "'uint'", "'uint8'", "'inst_map'", "'int'", 
                     "'string'", "'contract'", "'mapping'", "'bytes'", "'bytes20'", 
                     "'bytes32'", "'add'", "'assert'", "'balance'", "'block.coinbase'", 
                     "'block.difficulty'", "'block.gaslimit'", "'block.number'", 
                     "'block.timestamp'", "'call'", "'constant'", "'constructor'", 
                     "'contains'", "'credit'", "'debit'", "'default'", "'delete'", 
                     "'else'", "'emit'", "'eTransfer'", "'exists'", "'fallback'", 
                     "'for'", "'forall'", "'function'", "'if'", "'in'", 
                     "'int_min'", "'int_max'", "'ite'", "'invariant'", "'keys'", 
                     "'lemma'", "'length'", "'log'", "'modifies'", "'modifies_addresses'", 
                     "'new'", "'payable'", "'pop'", "'post'", "'pre'", "'print'", 
                     "'private'", "'public'", "'pure'", "'push'", "'receive'", 
                     "'return'", "'returns'", "'revert'", "'r_reverts'", 
                     "'safe_add'", "'safe_div'", "'safe_mod'", "'safe_mul'", 
                     "'safe_sub'", "'send'", "'sender'", "'spec'", "'struct'", 
                     "'this'", "'transfer'", "'tx_reverts'", "'tx.gasprice'", 
                     "'tx.origin'", "'uint_max'", "'value'", "'view'", "<INVALID>", 
                     "<INVALID>", "'null'", "<INVALID>", "'!'", "'&&'", 
                     "'||'", "'=>'", "'==>'", "'<==>'", "'=='", "'!='", 
                     "'<='", "'>='", "'<'", "'>'", "'->'", "'='", "'+='", 
                     "'-='", "'+'", "'-'", "'*'", "'/'", "'%'", "'{'", "'}'", 
                     "'['", "']'", "'('", "')'", "';'", "','", "'.'", "':'" ]

    symbolicNames = [ "<INVALID>", "ADDR", "BOOL", "ENUM", "EVENT", "EVENTLOG", 
                      "UINT", "UINT8", "INSTMAP", "INT", "STRING", "CONTRACT", 
                      "MAP", "BYTES", "BYTES20", "BYTES32", "ADD", "ASSERT", 
                      "BALANCE", "BCOINBASE", "BDIFF", "BGASLIMIT", "BNUMBER", 
                      "BTIMESTAMP", "CALL", "CONSTANT", "CONSTR", "CONTAINS", 
                      "CREDIT", "DEBIT", "DEFAULT", "DELETE", "ELSE", "EMIT", 
                      "ETRANSFER", "EXISTS", "FALLBACK", "FOR", "FORALL", 
                      "FUNCTION", "IF", "IN", "INT_MIN", "INT_MAX", "ITE", 
                      "INVARIANT", "KEYS", "LEMMA", "LENGTH", "LOG", "MODIFIES", 
                      "MODIFIESA", "NEW", "PAYABLE", "POP", "POST", "PRE", 
                      "PRINT", "PRIVATE", "PUBLIC", "PURE", "PUSH", "RECEIVE", 
                      "RETURN", "RETURNS", "REVERT", "RREVERTS", "SAFEADD", 
                      "SAFEDIV", "SAFEMOD", "SAFEMUL", "SAFESUB", "SEND", 
                      "SENDER", "SPEC", "STRUCT", "THIS", "TRANSFER", "TXREVERTS", 
                      "TXGASPRICE", "TXORIGIN", "UINT_MAX", "VALUE", "VIEW", 
                      "BoolLiteral", "IntLiteral", "NullLiteral", "StringLiteral", 
                      "LNOT", "LAND", "LOR", "MAPUPD", "IMPL", "BIMPL", 
                      "EQ", "NE", "LE", "GE", "LT", "GT", "RARROW", "ASSIGN", 
                      "INSERT", "REMOVE", "PLUS", "SUB", "MUL", "DIV", "MOD", 
                      "LBRACE", "RBRACE", "LBRACK", "RBRACK", "LPAREN", 
                      "RPAREN", "SEMI", "COMMA", "DOT", "COLON", "Iden", 
                      "Whitespace", "BlockComment", "LineComment" ]

    RULE_program = 0
    RULE_iden = 1
    RULE_datatype = 2
    RULE_idenTypeList = 3
    RULE_idenType = 4
    RULE_contractDecl = 5
    RULE_contractBody = 6
    RULE_contractContents = 7
    RULE_enumDecl = 8
    RULE_structDecl = 9
    RULE_funDecl = 10
    RULE_funParamList = 11
    RULE_funParam = 12
    RULE_functionBody = 13
    RULE_invariantDecl = 14
    RULE_invariantBody = 15
    RULE_eventDecl = 16
    RULE_constructorDecl = 17
    RULE_spec = 18
    RULE_stateMutability = 19
    RULE_methodDecl = 20
    RULE_methodParamList = 21
    RULE_methodParam = 22
    RULE_methodBody = 23
    RULE_returnStatement = 24
    RULE_varDecl = 25
    RULE_loopVarDecl = 26
    RULE_statement = 27
    RULE_elseStatement = 28
    RULE_lvalue = 29
    RULE_logcheck = 30
    RULE_expr = 31
    RULE_primitive = 32
    RULE_unnamedTupleBody = 33
    RULE_namedTupleBody = 34
    RULE_rvalueList = 35
    RULE_rvalue = 36

    ruleNames =  [ "program", "iden", "datatype", "idenTypeList", "idenType", 
                   "contractDecl", "contractBody", "contractContents", "enumDecl", 
                   "structDecl", "funDecl", "funParamList", "funParam", 
                   "functionBody", "invariantDecl", "invariantBody", "eventDecl", 
                   "constructorDecl", "spec", "stateMutability", "methodDecl", 
                   "methodParamList", "methodParam", "methodBody", "returnStatement", 
                   "varDecl", "loopVarDecl", "statement", "elseStatement", 
                   "lvalue", "logcheck", "expr", "primitive", "unnamedTupleBody", 
                   "namedTupleBody", "rvalueList", "rvalue" ]

    EOF = Token.EOF
    ADDR=1
    BOOL=2
    ENUM=3
    EVENT=4
    EVENTLOG=5
    UINT=6
    UINT8=7
    INSTMAP=8
    INT=9
    STRING=10
    CONTRACT=11
    MAP=12
    BYTES=13
    BYTES20=14
    BYTES32=15
    ADD=16
    ASSERT=17
    BALANCE=18
    BCOINBASE=19
    BDIFF=20
    BGASLIMIT=21
    BNUMBER=22
    BTIMESTAMP=23
    CALL=24
    CONSTANT=25
    CONSTR=26
    CONTAINS=27
    CREDIT=28
    DEBIT=29
    DEFAULT=30
    DELETE=31
    ELSE=32
    EMIT=33
    ETRANSFER=34
    EXISTS=35
    FALLBACK=36
    FOR=37
    FORALL=38
    FUNCTION=39
    IF=40
    IN=41
    INT_MIN=42
    INT_MAX=43
    ITE=44
    INVARIANT=45
    KEYS=46
    LEMMA=47
    LENGTH=48
    LOG=49
    MODIFIES=50
    MODIFIESA=51
    NEW=52
    PAYABLE=53
    POP=54
    POST=55
    PRE=56
    PRINT=57
    PRIVATE=58
    PUBLIC=59
    PURE=60
    PUSH=61
    RECEIVE=62
    RETURN=63
    RETURNS=64
    REVERT=65
    RREVERTS=66
    SAFEADD=67
    SAFEDIV=68
    SAFEMOD=69
    SAFEMUL=70
    SAFESUB=71
    SEND=72
    SENDER=73
    SPEC=74
    STRUCT=75
    THIS=76
    TRANSFER=77
    TXREVERTS=78
    TXGASPRICE=79
    TXORIGIN=80
    UINT_MAX=81
    VALUE=82
    VIEW=83
    BoolLiteral=84
    IntLiteral=85
    NullLiteral=86
    StringLiteral=87
    LNOT=88
    LAND=89
    LOR=90
    MAPUPD=91
    IMPL=92
    BIMPL=93
    EQ=94
    NE=95
    LE=96
    GE=97
    LT=98
    GT=99
    RARROW=100
    ASSIGN=101
    INSERT=102
    REMOVE=103
    PLUS=104
    SUB=105
    MUL=106
    DIV=107
    MOD=108
    LBRACE=109
    RBRACE=110
    LBRACK=111
    RBRACK=112
    LPAREN=113
    RPAREN=114
    SEMI=115
    COMMA=116
    DOT=117
    COLON=118
    Iden=119
    Whitespace=120
    BlockComment=121
    LineComment=122

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.8")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CelestialParser.EOF, 0)

        def contractDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.ContractDeclContext)
            else:
                return self.getTypedRuleContext(CelestialParser.ContractDeclContext,i)


        def getRuleIndex(self):
            return CelestialParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)




    def program(self):

        localctx = CelestialParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 77
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CelestialParser.CONTRACT:
                self.state = 74
                self.contractDecl()
                self.state = 79
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 80
            self.match(CelestialParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Iden(self):
            return self.getToken(CelestialParser.Iden, 0)

        def getRuleIndex(self):
            return CelestialParser.RULE_iden

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIden" ):
                listener.enterIden(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIden" ):
                listener.exitIden(self)




    def iden(self):

        localctx = CelestialParser.IdenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_iden)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 82
            self.match(CelestialParser.Iden)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatatypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arrayType = None # DatatypeContext
            self.keyType = None # DatatypeContext
            self.valueType = None # DatatypeContext
            self.name = None # IdenContext

        def MAP(self):
            return self.getToken(CelestialParser.MAP, 0)

        def LPAREN(self):
            return self.getToken(CelestialParser.LPAREN, 0)

        def MAPUPD(self):
            return self.getToken(CelestialParser.MAPUPD, 0)

        def RPAREN(self):
            return self.getToken(CelestialParser.RPAREN, 0)

        def datatype(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.DatatypeContext)
            else:
                return self.getTypedRuleContext(CelestialParser.DatatypeContext,i)


        def BOOL(self):
            return self.getToken(CelestialParser.BOOL, 0)

        def INT(self):
            return self.getToken(CelestialParser.INT, 0)

        def UINT(self):
            return self.getToken(CelestialParser.UINT, 0)

        def UINT8(self):
            return self.getToken(CelestialParser.UINT8, 0)

        def STRING(self):
            return self.getToken(CelestialParser.STRING, 0)

        def ADDR(self):
            return self.getToken(CelestialParser.ADDR, 0)

        def PAYABLE(self):
            return self.getToken(CelestialParser.PAYABLE, 0)

        def EVENTLOG(self):
            return self.getToken(CelestialParser.EVENTLOG, 0)

        def EVENT(self):
            return self.getToken(CelestialParser.EVENT, 0)

        def iden(self):
            return self.getTypedRuleContext(CelestialParser.IdenContext,0)


        def INSTMAP(self):
            return self.getToken(CelestialParser.INSTMAP, 0)

        def LT(self):
            return self.getToken(CelestialParser.LT, 0)

        def GT(self):
            return self.getToken(CelestialParser.GT, 0)

        def BYTES(self):
            return self.getToken(CelestialParser.BYTES, 0)

        def BYTES20(self):
            return self.getToken(CelestialParser.BYTES20, 0)

        def BYTES32(self):
            return self.getToken(CelestialParser.BYTES32, 0)

        def LBRACK(self):
            return self.getToken(CelestialParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(CelestialParser.RBRACK, 0)

        def getRuleIndex(self):
            return CelestialParser.RULE_datatype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatatype" ):
                listener.enterDatatype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatatype" ):
                listener.exitDatatype(self)



    def datatype(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CelestialParser.DatatypeContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 4
        self.enterRecursionRule(localctx, 4, self.RULE_datatype, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 112
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CelestialParser.MAP]:
                self.state = 85
                self.match(CelestialParser.MAP)
                self.state = 86
                self.match(CelestialParser.LPAREN)
                self.state = 87
                localctx.keyType = self.datatype(0)
                self.state = 88
                self.match(CelestialParser.MAPUPD)
                self.state = 89
                localctx.valueType = self.datatype(0)
                self.state = 90
                self.match(CelestialParser.RPAREN)
                pass
            elif token in [CelestialParser.BOOL]:
                self.state = 92
                self.match(CelestialParser.BOOL)
                pass
            elif token in [CelestialParser.INT]:
                self.state = 93
                self.match(CelestialParser.INT)
                pass
            elif token in [CelestialParser.UINT]:
                self.state = 94
                self.match(CelestialParser.UINT)
                pass
            elif token in [CelestialParser.UINT8]:
                self.state = 95
                self.match(CelestialParser.UINT8)
                pass
            elif token in [CelestialParser.STRING]:
                self.state = 96
                self.match(CelestialParser.STRING)
                pass
            elif token in [CelestialParser.ADDR]:
                self.state = 97
                self.match(CelestialParser.ADDR)
                self.state = 99
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
                if la_ == 1:
                    self.state = 98
                    self.match(CelestialParser.PAYABLE)


                pass
            elif token in [CelestialParser.EVENTLOG]:
                self.state = 101
                self.match(CelestialParser.EVENTLOG)
                pass
            elif token in [CelestialParser.EVENT]:
                self.state = 102
                self.match(CelestialParser.EVENT)
                pass
            elif token in [CelestialParser.Iden]:
                self.state = 103
                localctx.name = self.iden()
                pass
            elif token in [CelestialParser.INSTMAP]:
                self.state = 104
                self.match(CelestialParser.INSTMAP)
                self.state = 105
                self.match(CelestialParser.LT)
                self.state = 106
                self.iden()
                self.state = 107
                self.match(CelestialParser.GT)
                pass
            elif token in [CelestialParser.BYTES]:
                self.state = 109
                self.match(CelestialParser.BYTES)
                pass
            elif token in [CelestialParser.BYTES20]:
                self.state = 110
                self.match(CelestialParser.BYTES20)
                pass
            elif token in [CelestialParser.BYTES32]:
                self.state = 111
                self.match(CelestialParser.BYTES32)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 119
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CelestialParser.DatatypeContext(self, _parentctx, _parentState)
                    localctx.arrayType = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_datatype)
                    self.state = 114
                    if not self.precpred(self._ctx, 15):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                    self.state = 115
                    self.match(CelestialParser.LBRACK)
                    self.state = 116
                    self.match(CelestialParser.RBRACK) 
                self.state = 121
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class IdenTypeListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def idenType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.IdenTypeContext)
            else:
                return self.getTypedRuleContext(CelestialParser.IdenTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.COMMA)
            else:
                return self.getToken(CelestialParser.COMMA, i)

        def getRuleIndex(self):
            return CelestialParser.RULE_idenTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdenTypeList" ):
                listener.enterIdenTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdenTypeList" ):
                listener.exitIdenTypeList(self)




    def idenTypeList(self):

        localctx = CelestialParser.IdenTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_idenTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 122
            self.idenType()
            self.state = 127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CelestialParser.COMMA:
                self.state = 123
                self.match(CelestialParser.COMMA)
                self.state = 124
                self.idenType()
                self.state = 129
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdenTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdenContext

        def COLON(self):
            return self.getToken(CelestialParser.COLON, 0)

        def datatype(self):
            return self.getTypedRuleContext(CelestialParser.DatatypeContext,0)


        def iden(self):
            return self.getTypedRuleContext(CelestialParser.IdenContext,0)


        def getRuleIndex(self):
            return CelestialParser.RULE_idenType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdenType" ):
                listener.enterIdenType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdenType" ):
                listener.exitIdenType(self)




    def idenType(self):

        localctx = CelestialParser.IdenTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_idenType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 130
            localctx.name = self.iden()
            self.state = 131
            self.match(CelestialParser.COLON)
            self.state = 132
            self.datatype(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContractDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdenContext

        def CONTRACT(self):
            return self.getToken(CelestialParser.CONTRACT, 0)

        def contractBody(self):
            return self.getTypedRuleContext(CelestialParser.ContractBodyContext,0)


        def iden(self):
            return self.getTypedRuleContext(CelestialParser.IdenContext,0)


        def getRuleIndex(self):
            return CelestialParser.RULE_contractDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractDecl" ):
                listener.enterContractDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractDecl" ):
                listener.exitContractDecl(self)




    def contractDecl(self):

        localctx = CelestialParser.ContractDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_contractDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 134
            self.match(CelestialParser.CONTRACT)
            self.state = 135
            localctx.name = self.iden()
            self.state = 136
            self.contractBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContractBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(CelestialParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(CelestialParser.RBRACE, 0)

        def contractContents(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.ContractContentsContext)
            else:
                return self.getTypedRuleContext(CelestialParser.ContractContentsContext,i)


        def getRuleIndex(self):
            return CelestialParser.RULE_contractBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractBody" ):
                listener.enterContractBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractBody" ):
                listener.exitContractBody(self)




    def contractBody(self):

        localctx = CelestialParser.ContractBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_contractBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 138
            self.match(CelestialParser.LBRACE)
            self.state = 140 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 139
                self.contractContents()
                self.state = 142 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CelestialParser.ADDR) | (1 << CelestialParser.BOOL) | (1 << CelestialParser.ENUM) | (1 << CelestialParser.EVENT) | (1 << CelestialParser.EVENTLOG) | (1 << CelestialParser.UINT) | (1 << CelestialParser.UINT8) | (1 << CelestialParser.INSTMAP) | (1 << CelestialParser.INT) | (1 << CelestialParser.STRING) | (1 << CelestialParser.MAP) | (1 << CelestialParser.BYTES) | (1 << CelestialParser.BYTES20) | (1 << CelestialParser.BYTES32) | (1 << CelestialParser.CONSTR) | (1 << CelestialParser.FALLBACK) | (1 << CelestialParser.FUNCTION) | (1 << CelestialParser.INVARIANT) | (1 << CelestialParser.RECEIVE))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (CelestialParser.SPEC - 74)) | (1 << (CelestialParser.STRUCT - 74)) | (1 << (CelestialParser.Iden - 74)))) != 0)):
                    break

            self.state = 144
            self.match(CelestialParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContractContentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varDecl(self):
            return self.getTypedRuleContext(CelestialParser.VarDeclContext,0)


        def enumDecl(self):
            return self.getTypedRuleContext(CelestialParser.EnumDeclContext,0)


        def structDecl(self):
            return self.getTypedRuleContext(CelestialParser.StructDeclContext,0)


        def funDecl(self):
            return self.getTypedRuleContext(CelestialParser.FunDeclContext,0)


        def invariantDecl(self):
            return self.getTypedRuleContext(CelestialParser.InvariantDeclContext,0)


        def eventDecl(self):
            return self.getTypedRuleContext(CelestialParser.EventDeclContext,0)


        def constructorDecl(self):
            return self.getTypedRuleContext(CelestialParser.ConstructorDeclContext,0)


        def methodDecl(self):
            return self.getTypedRuleContext(CelestialParser.MethodDeclContext,0)


        def getRuleIndex(self):
            return CelestialParser.RULE_contractContents

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractContents" ):
                listener.enterContractContents(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractContents" ):
                listener.exitContractContents(self)




    def contractContents(self):

        localctx = CelestialParser.ContractContentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_contractContents)
        try:
            self.state = 154
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 146
                self.varDecl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 147
                self.enumDecl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 148
                self.structDecl()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 149
                self.funDecl()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 150
                self.invariantDecl()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 151
                self.eventDecl()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 152
                self.constructorDecl()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 153
                self.methodDecl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdenContext

        def ENUM(self):
            return self.getToken(CelestialParser.ENUM, 0)

        def LBRACE(self):
            return self.getToken(CelestialParser.LBRACE, 0)

        def iden(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.IdenContext)
            else:
                return self.getTypedRuleContext(CelestialParser.IdenContext,i)


        def RBRACE(self):
            return self.getToken(CelestialParser.RBRACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.COMMA)
            else:
                return self.getToken(CelestialParser.COMMA, i)

        def getRuleIndex(self):
            return CelestialParser.RULE_enumDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDecl" ):
                listener.enterEnumDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDecl" ):
                listener.exitEnumDecl(self)




    def enumDecl(self):

        localctx = CelestialParser.EnumDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_enumDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 156
            self.match(CelestialParser.ENUM)
            self.state = 157
            localctx.name = self.iden()
            self.state = 158
            self.match(CelestialParser.LBRACE)
            self.state = 159
            self.iden()
            self.state = 164
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CelestialParser.COMMA:
                self.state = 160
                self.match(CelestialParser.COMMA)
                self.state = 161
                self.iden()
                self.state = 166
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 167
            self.match(CelestialParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdenContext

        def STRUCT(self):
            return self.getToken(CelestialParser.STRUCT, 0)

        def LBRACE(self):
            return self.getToken(CelestialParser.LBRACE, 0)

        def datatype(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.DatatypeContext)
            else:
                return self.getTypedRuleContext(CelestialParser.DatatypeContext,i)


        def iden(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.IdenContext)
            else:
                return self.getTypedRuleContext(CelestialParser.IdenContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.SEMI)
            else:
                return self.getToken(CelestialParser.SEMI, i)

        def RBRACE(self):
            return self.getToken(CelestialParser.RBRACE, 0)

        def getRuleIndex(self):
            return CelestialParser.RULE_structDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDecl" ):
                listener.enterStructDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDecl" ):
                listener.exitStructDecl(self)




    def structDecl(self):

        localctx = CelestialParser.StructDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_structDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 169
            self.match(CelestialParser.STRUCT)
            self.state = 170
            localctx.name = self.iden()
            self.state = 171
            self.match(CelestialParser.LBRACE)
            self.state = 172
            self.datatype(0)
            self.state = 173
            self.iden()
            self.state = 174
            self.match(CelestialParser.SEMI)
            self.state = 181
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CelestialParser.ADDR) | (1 << CelestialParser.BOOL) | (1 << CelestialParser.EVENT) | (1 << CelestialParser.EVENTLOG) | (1 << CelestialParser.UINT) | (1 << CelestialParser.UINT8) | (1 << CelestialParser.INSTMAP) | (1 << CelestialParser.INT) | (1 << CelestialParser.STRING) | (1 << CelestialParser.MAP) | (1 << CelestialParser.BYTES) | (1 << CelestialParser.BYTES20) | (1 << CelestialParser.BYTES32))) != 0) or _la==CelestialParser.Iden:
                self.state = 175
                self.datatype(0)
                self.state = 176
                self.iden()
                self.state = 177
                self.match(CelestialParser.SEMI)
                self.state = 183
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 184
            self.match(CelestialParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CelestialParser.RULE_funDecl

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FDeclContext(FunDeclContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CelestialParser.FunDeclContext
            super().__init__(parser)
            self.name = None # IdenContext
            self.copyFrom(ctx)

        def SPEC(self):
            return self.getToken(CelestialParser.SPEC, 0)
        def LPAREN(self):
            return self.getToken(CelestialParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(CelestialParser.RPAREN, 0)
        def functionBody(self):
            return self.getTypedRuleContext(CelestialParser.FunctionBodyContext,0)

        def iden(self):
            return self.getTypedRuleContext(CelestialParser.IdenContext,0)

        def funParamList(self):
            return self.getTypedRuleContext(CelestialParser.FunParamListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFDecl" ):
                listener.enterFDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFDecl" ):
                listener.exitFDecl(self)



    def funDecl(self):

        localctx = CelestialParser.FunDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_funDecl)
        self._la = 0 # Token type
        try:
            localctx = CelestialParser.FDeclContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 186
            self.match(CelestialParser.SPEC)
            self.state = 187
            localctx.name = self.iden()
            self.state = 188
            self.match(CelestialParser.LPAREN)
            self.state = 190
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CelestialParser.ADDR) | (1 << CelestialParser.BOOL) | (1 << CelestialParser.EVENT) | (1 << CelestialParser.EVENTLOG) | (1 << CelestialParser.UINT) | (1 << CelestialParser.UINT8) | (1 << CelestialParser.INSTMAP) | (1 << CelestialParser.INT) | (1 << CelestialParser.STRING) | (1 << CelestialParser.MAP) | (1 << CelestialParser.BYTES) | (1 << CelestialParser.BYTES20) | (1 << CelestialParser.BYTES32))) != 0) or _la==CelestialParser.Iden:
                self.state = 189
                self.funParamList()


            self.state = 192
            self.match(CelestialParser.RPAREN)
            self.state = 193
            self.functionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunParamListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def funParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.FunParamContext)
            else:
                return self.getTypedRuleContext(CelestialParser.FunParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.COMMA)
            else:
                return self.getToken(CelestialParser.COMMA, i)

        def getRuleIndex(self):
            return CelestialParser.RULE_funParamList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunParamList" ):
                listener.enterFunParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunParamList" ):
                listener.exitFunParamList(self)




    def funParamList(self):

        localctx = CelestialParser.FunParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_funParamList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 195
            self.funParam()
            self.state = 200
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CelestialParser.COMMA:
                self.state = 196
                self.match(CelestialParser.COMMA)
                self.state = 197
                self.funParam()
                self.state = 202
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunParamContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdenContext

        def datatype(self):
            return self.getTypedRuleContext(CelestialParser.DatatypeContext,0)


        def iden(self):
            return self.getTypedRuleContext(CelestialParser.IdenContext,0)


        def getRuleIndex(self):
            return CelestialParser.RULE_funParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunParam" ):
                listener.enterFunParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunParam" ):
                listener.exitFunParam(self)




    def funParam(self):

        localctx = CelestialParser.FunParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_funParam)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 203
            self.datatype(0)
            self.state = 204
            localctx.name = self.iden()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(CelestialParser.LBRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(CelestialParser.ExprContext,0)


        def RBRACE(self):
            return self.getToken(CelestialParser.RBRACE, 0)

        def getRuleIndex(self):
            return CelestialParser.RULE_functionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionBody" ):
                listener.enterFunctionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionBody" ):
                listener.exitFunctionBody(self)




    def functionBody(self):

        localctx = CelestialParser.FunctionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_functionBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 206
            self.match(CelestialParser.LBRACE)
            self.state = 207
            self.expr(0)
            self.state = 208
            self.match(CelestialParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InvariantDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdenContext

        def INVARIANT(self):
            return self.getToken(CelestialParser.INVARIANT, 0)

        def invariantBody(self):
            return self.getTypedRuleContext(CelestialParser.InvariantBodyContext,0)


        def iden(self):
            return self.getTypedRuleContext(CelestialParser.IdenContext,0)


        def getRuleIndex(self):
            return CelestialParser.RULE_invariantDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvariantDecl" ):
                listener.enterInvariantDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvariantDecl" ):
                listener.exitInvariantDecl(self)




    def invariantDecl(self):

        localctx = CelestialParser.InvariantDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_invariantDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 210
            self.match(CelestialParser.INVARIANT)
            self.state = 211
            localctx.name = self.iden()
            self.state = 212
            self.invariantBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InvariantBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(CelestialParser.LBRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(CelestialParser.ExprContext,0)


        def RBRACE(self):
            return self.getToken(CelestialParser.RBRACE, 0)

        def getRuleIndex(self):
            return CelestialParser.RULE_invariantBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvariantBody" ):
                listener.enterInvariantBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvariantBody" ):
                listener.exitInvariantBody(self)




    def invariantBody(self):

        localctx = CelestialParser.InvariantBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_invariantBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 214
            self.match(CelestialParser.LBRACE)
            self.state = 215
            self.expr(0)
            self.state = 216
            self.match(CelestialParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdenContext

        def EVENT(self):
            return self.getToken(CelestialParser.EVENT, 0)

        def LPAREN(self):
            return self.getToken(CelestialParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(CelestialParser.RPAREN, 0)

        def SEMI(self):
            return self.getToken(CelestialParser.SEMI, 0)

        def iden(self):
            return self.getTypedRuleContext(CelestialParser.IdenContext,0)


        def datatype(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.DatatypeContext)
            else:
                return self.getTypedRuleContext(CelestialParser.DatatypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.COMMA)
            else:
                return self.getToken(CelestialParser.COMMA, i)

        def getRuleIndex(self):
            return CelestialParser.RULE_eventDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventDecl" ):
                listener.enterEventDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventDecl" ):
                listener.exitEventDecl(self)




    def eventDecl(self):

        localctx = CelestialParser.EventDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_eventDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 218
            self.match(CelestialParser.EVENT)
            self.state = 219
            localctx.name = self.iden()
            self.state = 220
            self.match(CelestialParser.LPAREN)
            self.state = 229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CelestialParser.ADDR) | (1 << CelestialParser.BOOL) | (1 << CelestialParser.EVENT) | (1 << CelestialParser.EVENTLOG) | (1 << CelestialParser.UINT) | (1 << CelestialParser.UINT8) | (1 << CelestialParser.INSTMAP) | (1 << CelestialParser.INT) | (1 << CelestialParser.STRING) | (1 << CelestialParser.MAP) | (1 << CelestialParser.BYTES) | (1 << CelestialParser.BYTES20) | (1 << CelestialParser.BYTES32))) != 0) or _la==CelestialParser.Iden:
                self.state = 221
                self.datatype(0)
                self.state = 226
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CelestialParser.COMMA:
                    self.state = 222
                    self.match(CelestialParser.COMMA)
                    self.state = 223
                    self.datatype(0)
                    self.state = 228
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 231
            self.match(CelestialParser.RPAREN)
            self.state = 232
            self.match(CelestialParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.modifies = None # RvalueListContext
            self.modifies_addrs = None # RvalueListContext

        def CONSTR(self):
            return self.getToken(CelestialParser.CONSTR, 0)

        def LPAREN(self):
            return self.getToken(CelestialParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(CelestialParser.RPAREN, 0)

        def spec(self):
            return self.getTypedRuleContext(CelestialParser.SpecContext,0)


        def methodBody(self):
            return self.getTypedRuleContext(CelestialParser.MethodBodyContext,0)


        def methodParamList(self):
            return self.getTypedRuleContext(CelestialParser.MethodParamListContext,0)


        def MODIFIES(self):
            return self.getToken(CelestialParser.MODIFIES, 0)

        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.LBRACK)
            else:
                return self.getToken(CelestialParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.RBRACK)
            else:
                return self.getToken(CelestialParser.RBRACK, i)

        def MODIFIESA(self):
            return self.getToken(CelestialParser.MODIFIESA, 0)

        def PUBLIC(self):
            return self.getToken(CelestialParser.PUBLIC, 0)

        def PRIVATE(self):
            return self.getToken(CelestialParser.PRIVATE, 0)

        def rvalueList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.RvalueListContext)
            else:
                return self.getTypedRuleContext(CelestialParser.RvalueListContext,i)


        def getRuleIndex(self):
            return CelestialParser.RULE_constructorDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorDecl" ):
                listener.enterConstructorDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorDecl" ):
                listener.exitConstructorDecl(self)




    def constructorDecl(self):

        localctx = CelestialParser.ConstructorDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_constructorDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 234
            self.match(CelestialParser.CONSTR)
            self.state = 235
            self.match(CelestialParser.LPAREN)
            self.state = 237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CelestialParser.ADDR) | (1 << CelestialParser.BOOL) | (1 << CelestialParser.EVENT) | (1 << CelestialParser.EVENTLOG) | (1 << CelestialParser.UINT) | (1 << CelestialParser.UINT8) | (1 << CelestialParser.INSTMAP) | (1 << CelestialParser.INT) | (1 << CelestialParser.STRING) | (1 << CelestialParser.MAP) | (1 << CelestialParser.BYTES) | (1 << CelestialParser.BYTES20) | (1 << CelestialParser.BYTES32))) != 0) or _la==CelestialParser.Iden:
                self.state = 236
                self.methodParamList()


            self.state = 239
            self.match(CelestialParser.RPAREN)
            self.state = 241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CelestialParser.PRIVATE or _la==CelestialParser.PUBLIC:
                self.state = 240
                _la = self._input.LA(1)
                if not(_la==CelestialParser.PRIVATE or _la==CelestialParser.PUBLIC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 243
            self.spec()
            self.state = 250
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CelestialParser.MODIFIES:
                self.state = 244
                self.match(CelestialParser.MODIFIES)
                self.state = 245
                self.match(CelestialParser.LBRACK)
                self.state = 247
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CelestialParser.ADDR) | (1 << CelestialParser.BALANCE) | (1 << CelestialParser.BCOINBASE) | (1 << CelestialParser.BDIFF) | (1 << CelestialParser.BGASLIMIT) | (1 << CelestialParser.BNUMBER) | (1 << CelestialParser.BTIMESTAMP) | (1 << CelestialParser.DEFAULT) | (1 << CelestialParser.EXISTS) | (1 << CelestialParser.FORALL) | (1 << CelestialParser.INT_MIN) | (1 << CelestialParser.INT_MAX) | (1 << CelestialParser.ITE) | (1 << CelestialParser.LOG) | (1 << CelestialParser.NEW) | (1 << CelestialParser.PAYABLE))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CelestialParser.SAFEADD - 67)) | (1 << (CelestialParser.SAFEDIV - 67)) | (1 << (CelestialParser.SAFEMOD - 67)) | (1 << (CelestialParser.SAFEMUL - 67)) | (1 << (CelestialParser.SAFESUB - 67)) | (1 << (CelestialParser.SENDER - 67)) | (1 << (CelestialParser.THIS - 67)) | (1 << (CelestialParser.TXGASPRICE - 67)) | (1 << (CelestialParser.TXORIGIN - 67)) | (1 << (CelestialParser.UINT_MAX - 67)) | (1 << (CelestialParser.VALUE - 67)) | (1 << (CelestialParser.BoolLiteral - 67)) | (1 << (CelestialParser.IntLiteral - 67)) | (1 << (CelestialParser.NullLiteral - 67)) | (1 << (CelestialParser.StringLiteral - 67)) | (1 << (CelestialParser.LNOT - 67)) | (1 << (CelestialParser.SUB - 67)) | (1 << (CelestialParser.LPAREN - 67)) | (1 << (CelestialParser.Iden - 67)))) != 0):
                    self.state = 246
                    localctx.modifies = self.rvalueList()


                self.state = 249
                self.match(CelestialParser.RBRACK)


            self.state = 258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CelestialParser.MODIFIESA:
                self.state = 252
                self.match(CelestialParser.MODIFIESA)
                self.state = 253
                self.match(CelestialParser.LBRACK)
                self.state = 255
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CelestialParser.ADDR) | (1 << CelestialParser.BALANCE) | (1 << CelestialParser.BCOINBASE) | (1 << CelestialParser.BDIFF) | (1 << CelestialParser.BGASLIMIT) | (1 << CelestialParser.BNUMBER) | (1 << CelestialParser.BTIMESTAMP) | (1 << CelestialParser.DEFAULT) | (1 << CelestialParser.EXISTS) | (1 << CelestialParser.FORALL) | (1 << CelestialParser.INT_MIN) | (1 << CelestialParser.INT_MAX) | (1 << CelestialParser.ITE) | (1 << CelestialParser.LOG) | (1 << CelestialParser.NEW) | (1 << CelestialParser.PAYABLE))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CelestialParser.SAFEADD - 67)) | (1 << (CelestialParser.SAFEDIV - 67)) | (1 << (CelestialParser.SAFEMOD - 67)) | (1 << (CelestialParser.SAFEMUL - 67)) | (1 << (CelestialParser.SAFESUB - 67)) | (1 << (CelestialParser.SENDER - 67)) | (1 << (CelestialParser.THIS - 67)) | (1 << (CelestialParser.TXGASPRICE - 67)) | (1 << (CelestialParser.TXORIGIN - 67)) | (1 << (CelestialParser.UINT_MAX - 67)) | (1 << (CelestialParser.VALUE - 67)) | (1 << (CelestialParser.BoolLiteral - 67)) | (1 << (CelestialParser.IntLiteral - 67)) | (1 << (CelestialParser.NullLiteral - 67)) | (1 << (CelestialParser.StringLiteral - 67)) | (1 << (CelestialParser.LNOT - 67)) | (1 << (CelestialParser.SUB - 67)) | (1 << (CelestialParser.LPAREN - 67)) | (1 << (CelestialParser.Iden - 67)))) != 0):
                    self.state = 254
                    localctx.modifies_addrs = self.rvalueList()


                self.state = 257
                self.match(CelestialParser.RBRACK)


            self.state = 260
            self.methodBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pre = None # ExprContext
            self.post = None # ExprContext
            self.reverts = None # ExprContext
            self.rreverts = None # ExprContext

        def PRE(self):
            return self.getToken(CelestialParser.PRE, 0)

        def POST(self):
            return self.getToken(CelestialParser.POST, 0)

        def CREDIT(self):
            return self.getToken(CelestialParser.CREDIT, 0)

        def DEBIT(self):
            return self.getToken(CelestialParser.DEBIT, 0)

        def TXREVERTS(self):
            return self.getToken(CelestialParser.TXREVERTS, 0)

        def RREVERTS(self):
            return self.getToken(CelestialParser.RREVERTS, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.ExprContext)
            else:
                return self.getTypedRuleContext(CelestialParser.ExprContext,i)


        def getRuleIndex(self):
            return CelestialParser.RULE_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpec" ):
                listener.enterSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpec" ):
                listener.exitSpec(self)




    def spec(self):

        localctx = CelestialParser.SpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_spec)
        self._la = 0 # Token type
        try:
            self.state = 350
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 264
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.PRE:
                    self.state = 262
                    self.match(CelestialParser.PRE)
                    self.state = 263
                    localctx.pre = self.expr(0)


                self.state = 268
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.POST:
                    self.state = 266
                    self.match(CelestialParser.POST)
                    self.state = 267
                    localctx.post = self.expr(0)


                self.state = 271
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.CREDIT:
                    self.state = 270
                    self.match(CelestialParser.CREDIT)


                self.state = 274
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.DEBIT:
                    self.state = 273
                    self.match(CelestialParser.DEBIT)


                self.state = 278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.TXREVERTS:
                    self.state = 276
                    self.match(CelestialParser.TXREVERTS)
                    self.state = 277
                    localctx.reverts = self.expr(0)


                self.state = 282
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.RREVERTS:
                    self.state = 280
                    self.match(CelestialParser.RREVERTS)
                    self.state = 281
                    localctx.rreverts = self.expr(0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 285
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.CREDIT:
                    self.state = 284
                    self.match(CelestialParser.CREDIT)


                self.state = 288
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.DEBIT:
                    self.state = 287
                    self.match(CelestialParser.DEBIT)


                self.state = 292
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.PRE:
                    self.state = 290
                    self.match(CelestialParser.PRE)
                    self.state = 291
                    localctx.pre = self.expr(0)


                self.state = 296
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.POST:
                    self.state = 294
                    self.match(CelestialParser.POST)
                    self.state = 295
                    localctx.post = self.expr(0)


                self.state = 300
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.TXREVERTS:
                    self.state = 298
                    self.match(CelestialParser.TXREVERTS)
                    self.state = 299
                    localctx.reverts = self.expr(0)


                self.state = 304
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.RREVERTS:
                    self.state = 302
                    self.match(CelestialParser.RREVERTS)
                    self.state = 303
                    localctx.rreverts = self.expr(0)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 308
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.PRE:
                    self.state = 306
                    self.match(CelestialParser.PRE)
                    self.state = 307
                    localctx.pre = self.expr(0)


                self.state = 312
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.TXREVERTS:
                    self.state = 310
                    self.match(CelestialParser.TXREVERTS)
                    self.state = 311
                    localctx.reverts = self.expr(0)


                self.state = 315
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.CREDIT:
                    self.state = 314
                    self.match(CelestialParser.CREDIT)


                self.state = 318
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.DEBIT:
                    self.state = 317
                    self.match(CelestialParser.DEBIT)


                self.state = 322
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.POST:
                    self.state = 320
                    self.match(CelestialParser.POST)
                    self.state = 321
                    localctx.post = self.expr(0)


                self.state = 326
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.RREVERTS:
                    self.state = 324
                    self.match(CelestialParser.RREVERTS)
                    self.state = 325
                    localctx.rreverts = self.expr(0)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 330
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.PRE:
                    self.state = 328
                    self.match(CelestialParser.PRE)
                    self.state = 329
                    localctx.pre = self.expr(0)


                self.state = 334
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.TXREVERTS:
                    self.state = 332
                    self.match(CelestialParser.TXREVERTS)
                    self.state = 333
                    localctx.reverts = self.expr(0)


                self.state = 338
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.POST:
                    self.state = 336
                    self.match(CelestialParser.POST)
                    self.state = 337
                    localctx.post = self.expr(0)


                self.state = 341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.CREDIT:
                    self.state = 340
                    self.match(CelestialParser.CREDIT)


                self.state = 344
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.DEBIT:
                    self.state = 343
                    self.match(CelestialParser.DEBIT)


                self.state = 348
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.RREVERTS:
                    self.state = 346
                    self.match(CelestialParser.RREVERTS)
                    self.state = 347
                    localctx.rreverts = self.expr(0)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StateMutabilityContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PURE(self):
            return self.getToken(CelestialParser.PURE, 0)

        def CONSTANT(self):
            return self.getToken(CelestialParser.CONSTANT, 0)

        def VIEW(self):
            return self.getToken(CelestialParser.VIEW, 0)

        def getRuleIndex(self):
            return CelestialParser.RULE_stateMutability

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateMutability" ):
                listener.enterStateMutability(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateMutability" ):
                listener.exitStateMutability(self)




    def stateMutability(self):

        localctx = CelestialParser.StateMutabilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_stateMutability)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            _la = self._input.LA(1)
            if not(((((_la - 25)) & ~0x3f) == 0 and ((1 << (_la - 25)) & ((1 << (CelestialParser.CONSTANT - 25)) | (1 << (CelestialParser.PURE - 25)) | (1 << (CelestialParser.VIEW - 25)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CelestialParser.RULE_methodDecl

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MDeclContext(MethodDeclContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a CelestialParser.MethodDeclContext
            super().__init__(parser)
            self.name = None # IdenContext
            self.modifies = None # RvalueListContext
            self.modifies_addrs = None # RvalueListContext
            self.returnval = None # IdenContext
            self.copyFrom(ctx)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.LPAREN)
            else:
                return self.getToken(CelestialParser.LPAREN, i)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.RPAREN)
            else:
                return self.getToken(CelestialParser.RPAREN, i)
        def spec(self):
            return self.getTypedRuleContext(CelestialParser.SpecContext,0)

        def methodBody(self):
            return self.getTypedRuleContext(CelestialParser.MethodBodyContext,0)

        def RECEIVE(self):
            return self.getToken(CelestialParser.RECEIVE, 0)
        def FALLBACK(self):
            return self.getToken(CelestialParser.FALLBACK, 0)
        def FUNCTION(self):
            return self.getToken(CelestialParser.FUNCTION, 0)
        def iden(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.IdenContext)
            else:
                return self.getTypedRuleContext(CelestialParser.IdenContext,i)

        def methodParamList(self):
            return self.getTypedRuleContext(CelestialParser.MethodParamListContext,0)

        def stateMutability(self):
            return self.getTypedRuleContext(CelestialParser.StateMutabilityContext,0)

        def MODIFIES(self):
            return self.getToken(CelestialParser.MODIFIES, 0)
        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.LBRACK)
            else:
                return self.getToken(CelestialParser.LBRACK, i)
        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.RBRACK)
            else:
                return self.getToken(CelestialParser.RBRACK, i)
        def MODIFIESA(self):
            return self.getToken(CelestialParser.MODIFIESA, 0)
        def RETURNS(self):
            return self.getToken(CelestialParser.RETURNS, 0)
        def datatype(self):
            return self.getTypedRuleContext(CelestialParser.DatatypeContext,0)

        def PUBLIC(self):
            return self.getToken(CelestialParser.PUBLIC, 0)
        def PRIVATE(self):
            return self.getToken(CelestialParser.PRIVATE, 0)
        def rvalueList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.RvalueListContext)
            else:
                return self.getTypedRuleContext(CelestialParser.RvalueListContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMDecl" ):
                listener.enterMDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMDecl" ):
                listener.exitMDecl(self)



    def methodDecl(self):

        localctx = CelestialParser.MethodDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_methodDecl)
        self._la = 0 # Token type
        try:
            localctx = CelestialParser.MDeclContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 358
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CelestialParser.RECEIVE]:
                self.state = 354
                self.match(CelestialParser.RECEIVE)
                pass
            elif token in [CelestialParser.FALLBACK]:
                self.state = 355
                self.match(CelestialParser.FALLBACK)
                pass
            elif token in [CelestialParser.FUNCTION]:
                self.state = 356
                self.match(CelestialParser.FUNCTION)
                self.state = 357
                localctx.name = self.iden()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 360
            self.match(CelestialParser.LPAREN)
            self.state = 362
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CelestialParser.ADDR) | (1 << CelestialParser.BOOL) | (1 << CelestialParser.EVENT) | (1 << CelestialParser.EVENTLOG) | (1 << CelestialParser.UINT) | (1 << CelestialParser.UINT8) | (1 << CelestialParser.INSTMAP) | (1 << CelestialParser.INT) | (1 << CelestialParser.STRING) | (1 << CelestialParser.MAP) | (1 << CelestialParser.BYTES) | (1 << CelestialParser.BYTES20) | (1 << CelestialParser.BYTES32))) != 0) or _la==CelestialParser.Iden:
                self.state = 361
                self.methodParamList()


            self.state = 364
            self.match(CelestialParser.RPAREN)
            self.state = 366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CelestialParser.PRIVATE or _la==CelestialParser.PUBLIC:
                self.state = 365
                _la = self._input.LA(1)
                if not(_la==CelestialParser.PRIVATE or _la==CelestialParser.PUBLIC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 369
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 25)) & ~0x3f) == 0 and ((1 << (_la - 25)) & ((1 << (CelestialParser.CONSTANT - 25)) | (1 << (CelestialParser.PURE - 25)) | (1 << (CelestialParser.VIEW - 25)))) != 0):
                self.state = 368
                self.stateMutability()


            self.state = 371
            self.spec()
            self.state = 378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CelestialParser.MODIFIES:
                self.state = 372
                self.match(CelestialParser.MODIFIES)
                self.state = 373
                self.match(CelestialParser.LBRACK)
                self.state = 375
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CelestialParser.ADDR) | (1 << CelestialParser.BALANCE) | (1 << CelestialParser.BCOINBASE) | (1 << CelestialParser.BDIFF) | (1 << CelestialParser.BGASLIMIT) | (1 << CelestialParser.BNUMBER) | (1 << CelestialParser.BTIMESTAMP) | (1 << CelestialParser.DEFAULT) | (1 << CelestialParser.EXISTS) | (1 << CelestialParser.FORALL) | (1 << CelestialParser.INT_MIN) | (1 << CelestialParser.INT_MAX) | (1 << CelestialParser.ITE) | (1 << CelestialParser.LOG) | (1 << CelestialParser.NEW) | (1 << CelestialParser.PAYABLE))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CelestialParser.SAFEADD - 67)) | (1 << (CelestialParser.SAFEDIV - 67)) | (1 << (CelestialParser.SAFEMOD - 67)) | (1 << (CelestialParser.SAFEMUL - 67)) | (1 << (CelestialParser.SAFESUB - 67)) | (1 << (CelestialParser.SENDER - 67)) | (1 << (CelestialParser.THIS - 67)) | (1 << (CelestialParser.TXGASPRICE - 67)) | (1 << (CelestialParser.TXORIGIN - 67)) | (1 << (CelestialParser.UINT_MAX - 67)) | (1 << (CelestialParser.VALUE - 67)) | (1 << (CelestialParser.BoolLiteral - 67)) | (1 << (CelestialParser.IntLiteral - 67)) | (1 << (CelestialParser.NullLiteral - 67)) | (1 << (CelestialParser.StringLiteral - 67)) | (1 << (CelestialParser.LNOT - 67)) | (1 << (CelestialParser.SUB - 67)) | (1 << (CelestialParser.LPAREN - 67)) | (1 << (CelestialParser.Iden - 67)))) != 0):
                    self.state = 374
                    localctx.modifies = self.rvalueList()


                self.state = 377
                self.match(CelestialParser.RBRACK)


            self.state = 386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CelestialParser.MODIFIESA:
                self.state = 380
                self.match(CelestialParser.MODIFIESA)
                self.state = 381
                self.match(CelestialParser.LBRACK)
                self.state = 383
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CelestialParser.ADDR) | (1 << CelestialParser.BALANCE) | (1 << CelestialParser.BCOINBASE) | (1 << CelestialParser.BDIFF) | (1 << CelestialParser.BGASLIMIT) | (1 << CelestialParser.BNUMBER) | (1 << CelestialParser.BTIMESTAMP) | (1 << CelestialParser.DEFAULT) | (1 << CelestialParser.EXISTS) | (1 << CelestialParser.FORALL) | (1 << CelestialParser.INT_MIN) | (1 << CelestialParser.INT_MAX) | (1 << CelestialParser.ITE) | (1 << CelestialParser.LOG) | (1 << CelestialParser.NEW) | (1 << CelestialParser.PAYABLE))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CelestialParser.SAFEADD - 67)) | (1 << (CelestialParser.SAFEDIV - 67)) | (1 << (CelestialParser.SAFEMOD - 67)) | (1 << (CelestialParser.SAFEMUL - 67)) | (1 << (CelestialParser.SAFESUB - 67)) | (1 << (CelestialParser.SENDER - 67)) | (1 << (CelestialParser.THIS - 67)) | (1 << (CelestialParser.TXGASPRICE - 67)) | (1 << (CelestialParser.TXORIGIN - 67)) | (1 << (CelestialParser.UINT_MAX - 67)) | (1 << (CelestialParser.VALUE - 67)) | (1 << (CelestialParser.BoolLiteral - 67)) | (1 << (CelestialParser.IntLiteral - 67)) | (1 << (CelestialParser.NullLiteral - 67)) | (1 << (CelestialParser.StringLiteral - 67)) | (1 << (CelestialParser.LNOT - 67)) | (1 << (CelestialParser.SUB - 67)) | (1 << (CelestialParser.LPAREN - 67)) | (1 << (CelestialParser.Iden - 67)))) != 0):
                    self.state = 382
                    localctx.modifies_addrs = self.rvalueList()


                self.state = 385
                self.match(CelestialParser.RBRACK)


            self.state = 396
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CelestialParser.RETURNS:
                self.state = 388
                self.match(CelestialParser.RETURNS)
                self.state = 389
                self.match(CelestialParser.LPAREN)
                self.state = 390
                self.datatype(0)
                self.state = 392
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.Iden:
                    self.state = 391
                    localctx.returnval = self.iden()


                self.state = 394
                self.match(CelestialParser.RPAREN)


            self.state = 398
            self.methodBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodParamListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def methodParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.MethodParamContext)
            else:
                return self.getTypedRuleContext(CelestialParser.MethodParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.COMMA)
            else:
                return self.getToken(CelestialParser.COMMA, i)

        def getRuleIndex(self):
            return CelestialParser.RULE_methodParamList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodParamList" ):
                listener.enterMethodParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodParamList" ):
                listener.exitMethodParamList(self)




    def methodParamList(self):

        localctx = CelestialParser.MethodParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_methodParamList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self.methodParam()
            self.state = 405
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CelestialParser.COMMA:
                self.state = 401
                self.match(CelestialParser.COMMA)
                self.state = 402
                self.methodParam()
                self.state = 407
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodParamContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdenContext

        def datatype(self):
            return self.getTypedRuleContext(CelestialParser.DatatypeContext,0)


        def iden(self):
            return self.getTypedRuleContext(CelestialParser.IdenContext,0)


        def getRuleIndex(self):
            return CelestialParser.RULE_methodParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodParam" ):
                listener.enterMethodParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodParam" ):
                listener.exitMethodParam(self)




    def methodParam(self):

        localctx = CelestialParser.MethodParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_methodParam)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 408
            self.datatype(0)
            self.state = 409
            localctx.name = self.iden()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(CelestialParser.LBRACE, 0)

        def returnStatement(self):
            return self.getTypedRuleContext(CelestialParser.ReturnStatementContext,0)


        def RBRACE(self):
            return self.getToken(CelestialParser.RBRACE, 0)

        def varDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.VarDeclContext)
            else:
                return self.getTypedRuleContext(CelestialParser.VarDeclContext,i)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.StatementContext)
            else:
                return self.getTypedRuleContext(CelestialParser.StatementContext,i)


        def getRuleIndex(self):
            return CelestialParser.RULE_methodBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodBody" ):
                listener.enterMethodBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodBody" ):
                listener.exitMethodBody(self)




    def methodBody(self):

        localctx = CelestialParser.MethodBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_methodBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 411
            self.match(CelestialParser.LBRACE)
            self.state = 416
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CelestialParser.ADDR) | (1 << CelestialParser.BOOL) | (1 << CelestialParser.EVENT) | (1 << CelestialParser.EVENTLOG) | (1 << CelestialParser.UINT) | (1 << CelestialParser.UINT8) | (1 << CelestialParser.INSTMAP) | (1 << CelestialParser.INT) | (1 << CelestialParser.STRING) | (1 << CelestialParser.MAP) | (1 << CelestialParser.BYTES) | (1 << CelestialParser.BYTES20) | (1 << CelestialParser.BYTES32) | (1 << CelestialParser.ASSERT) | (1 << CelestialParser.BALANCE) | (1 << CelestialParser.BCOINBASE) | (1 << CelestialParser.BDIFF) | (1 << CelestialParser.BGASLIMIT) | (1 << CelestialParser.BNUMBER) | (1 << CelestialParser.BTIMESTAMP) | (1 << CelestialParser.DEFAULT) | (1 << CelestialParser.DELETE) | (1 << CelestialParser.EMIT) | (1 << CelestialParser.EXISTS) | (1 << CelestialParser.FOR) | (1 << CelestialParser.FORALL) | (1 << CelestialParser.IF) | (1 << CelestialParser.INT_MIN) | (1 << CelestialParser.INT_MAX) | (1 << CelestialParser.ITE) | (1 << CelestialParser.LOG) | (1 << CelestialParser.NEW) | (1 << CelestialParser.PAYABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CelestialParser.REVERT - 65)) | (1 << (CelestialParser.SAFEADD - 65)) | (1 << (CelestialParser.SAFEDIV - 65)) | (1 << (CelestialParser.SAFEMOD - 65)) | (1 << (CelestialParser.SAFEMUL - 65)) | (1 << (CelestialParser.SAFESUB - 65)) | (1 << (CelestialParser.SEND - 65)) | (1 << (CelestialParser.SENDER - 65)) | (1 << (CelestialParser.THIS - 65)) | (1 << (CelestialParser.TXGASPRICE - 65)) | (1 << (CelestialParser.TXORIGIN - 65)) | (1 << (CelestialParser.UINT_MAX - 65)) | (1 << (CelestialParser.VALUE - 65)) | (1 << (CelestialParser.BoolLiteral - 65)) | (1 << (CelestialParser.IntLiteral - 65)) | (1 << (CelestialParser.NullLiteral - 65)) | (1 << (CelestialParser.StringLiteral - 65)) | (1 << (CelestialParser.LNOT - 65)) | (1 << (CelestialParser.SUB - 65)) | (1 << (CelestialParser.LBRACE - 65)) | (1 << (CelestialParser.LPAREN - 65)) | (1 << (CelestialParser.Iden - 65)))) != 0):
                self.state = 414
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                if la_ == 1:
                    self.state = 412
                    self.varDecl()
                    pass

                elif la_ == 2:
                    self.state = 413
                    self.statement()
                    pass


                self.state = 418
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 419
            self.returnStatement()
            self.state = 420
            self.match(CelestialParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(CelestialParser.RETURN, 0)

        def SEMI(self):
            return self.getToken(CelestialParser.SEMI, 0)

        def expr(self):
            return self.getTypedRuleContext(CelestialParser.ExprContext,0)


        def getRuleIndex(self):
            return CelestialParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)




    def returnStatement(self):

        localctx = CelestialParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_returnStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 422
            self.match(CelestialParser.RETURN)
            self.state = 424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CelestialParser.ADDR) | (1 << CelestialParser.BALANCE) | (1 << CelestialParser.BCOINBASE) | (1 << CelestialParser.BDIFF) | (1 << CelestialParser.BGASLIMIT) | (1 << CelestialParser.BNUMBER) | (1 << CelestialParser.BTIMESTAMP) | (1 << CelestialParser.DEFAULT) | (1 << CelestialParser.EXISTS) | (1 << CelestialParser.FORALL) | (1 << CelestialParser.INT_MIN) | (1 << CelestialParser.INT_MAX) | (1 << CelestialParser.ITE) | (1 << CelestialParser.LOG) | (1 << CelestialParser.NEW) | (1 << CelestialParser.PAYABLE))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CelestialParser.SAFEADD - 67)) | (1 << (CelestialParser.SAFEDIV - 67)) | (1 << (CelestialParser.SAFEMOD - 67)) | (1 << (CelestialParser.SAFEMUL - 67)) | (1 << (CelestialParser.SAFESUB - 67)) | (1 << (CelestialParser.SENDER - 67)) | (1 << (CelestialParser.THIS - 67)) | (1 << (CelestialParser.TXGASPRICE - 67)) | (1 << (CelestialParser.TXORIGIN - 67)) | (1 << (CelestialParser.UINT_MAX - 67)) | (1 << (CelestialParser.VALUE - 67)) | (1 << (CelestialParser.BoolLiteral - 67)) | (1 << (CelestialParser.IntLiteral - 67)) | (1 << (CelestialParser.NullLiteral - 67)) | (1 << (CelestialParser.StringLiteral - 67)) | (1 << (CelestialParser.LNOT - 67)) | (1 << (CelestialParser.SUB - 67)) | (1 << (CelestialParser.LPAREN - 67)) | (1 << (CelestialParser.Iden - 67)))) != 0):
                self.state = 423
                self.expr(0)


            self.state = 426
            self.match(CelestialParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def datatype(self):
            return self.getTypedRuleContext(CelestialParser.DatatypeContext,0)


        def iden(self):
            return self.getTypedRuleContext(CelestialParser.IdenContext,0)


        def SEMI(self):
            return self.getToken(CelestialParser.SEMI, 0)

        def ASSIGN(self):
            return self.getToken(CelestialParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(CelestialParser.ExprContext,0)


        def getRuleIndex(self):
            return CelestialParser.RULE_varDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarDecl" ):
                listener.enterVarDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarDecl" ):
                listener.exitVarDecl(self)




    def varDecl(self):

        localctx = CelestialParser.VarDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_varDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 428
            self.datatype(0)
            self.state = 429
            self.iden()
            self.state = 432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CelestialParser.ASSIGN:
                self.state = 430
                self.match(CelestialParser.ASSIGN)
                self.state = 431
                self.expr(0)


            self.state = 434
            self.match(CelestialParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopVarDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def datatype(self):
            return self.getTypedRuleContext(CelestialParser.DatatypeContext,0)


        def iden(self):
            return self.getTypedRuleContext(CelestialParser.IdenContext,0)


        def ASSIGN(self):
            return self.getToken(CelestialParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(CelestialParser.ExprContext,0)


        def getRuleIndex(self):
            return CelestialParser.RULE_loopVarDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopVarDecl" ):
                listener.enterLoopVarDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopVarDecl" ):
                listener.exitLoopVarDecl(self)




    def loopVarDecl(self):

        localctx = CelestialParser.LoopVarDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_loopVarDecl)
        try:
            self.state = 445
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 436
                self.datatype(0)
                self.state = 437
                self.iden()
                self.state = 438
                self.match(CelestialParser.ASSIGN)
                self.state = 439
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 441
                self.iden()
                self.state = 442
                self.match(CelestialParser.ASSIGN)
                self.state = 443
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arrayName = None # LvalueContext
            self.value = None # ExprContext
            self.toDelete = None # LvalueContext
            self.assignTo = None # LvalueContext
            self.otherContractInstance = None # LvalueContext
            self.method = None # IdenContext
            self.assignment = None # Token
            self.thenBranch = None # StatementContext
            self.loopBody = None # StatementContext
            self.contract = None # ExprContext
            self.payload = None # ExprContext
            self.to = None # ExprContext
            self.amount = None # ExprContext
            self.event = None # IdenContext

        def LBRACE(self):
            return self.getToken(CelestialParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(CelestialParser.RBRACE, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.StatementContext)
            else:
                return self.getTypedRuleContext(CelestialParser.StatementContext,i)


        def DOT(self):
            return self.getToken(CelestialParser.DOT, 0)

        def PUSH(self):
            return self.getToken(CelestialParser.PUSH, 0)

        def LPAREN(self):
            return self.getToken(CelestialParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(CelestialParser.RPAREN, 0)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.SEMI)
            else:
                return self.getToken(CelestialParser.SEMI, i)

        def lvalue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.LvalueContext)
            else:
                return self.getTypedRuleContext(CelestialParser.LvalueContext,i)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.ExprContext)
            else:
                return self.getTypedRuleContext(CelestialParser.ExprContext,i)


        def POP(self):
            return self.getToken(CelestialParser.POP, 0)

        def DELETE(self):
            return self.getToken(CelestialParser.DELETE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.COMMA)
            else:
                return self.getToken(CelestialParser.COMMA, i)

        def ASSERT(self):
            return self.getToken(CelestialParser.ASSERT, 0)

        def StringLiteral(self):
            return self.getToken(CelestialParser.StringLiteral, 0)

        def ASSIGN(self):
            return self.getToken(CelestialParser.ASSIGN, 0)

        def NEW(self):
            return self.getToken(CelestialParser.NEW, 0)

        def iden(self):
            return self.getTypedRuleContext(CelestialParser.IdenContext,0)


        def rvalueList(self):
            return self.getTypedRuleContext(CelestialParser.RvalueListContext,0)


        def CALL(self):
            return self.getToken(CelestialParser.CALL, 0)

        def BOOL(self):
            return self.getToken(CelestialParser.BOOL, 0)

        def rvalue(self):
            return self.getTypedRuleContext(CelestialParser.RvalueContext,0)


        def IF(self):
            return self.getToken(CelestialParser.IF, 0)

        def elseStatement(self):
            return self.getTypedRuleContext(CelestialParser.ElseStatementContext,0)


        def FOR(self):
            return self.getToken(CelestialParser.FOR, 0)

        def loopVarDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.LoopVarDeclContext)
            else:
                return self.getTypedRuleContext(CelestialParser.LoopVarDeclContext,i)


        def SEND(self):
            return self.getToken(CelestialParser.SEND, 0)

        def ETRANSFER(self):
            return self.getToken(CelestialParser.ETRANSFER, 0)

        def TRANSFER(self):
            return self.getToken(CelestialParser.TRANSFER, 0)

        def EMIT(self):
            return self.getToken(CelestialParser.EMIT, 0)

        def REVERT(self):
            return self.getToken(CelestialParser.REVERT, 0)

        def getRuleIndex(self):
            return CelestialParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = CelestialParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 630
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 447
                self.match(CelestialParser.LBRACE)
                self.state = 451
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CelestialParser.ADDR) | (1 << CelestialParser.BOOL) | (1 << CelestialParser.ASSERT) | (1 << CelestialParser.BALANCE) | (1 << CelestialParser.BCOINBASE) | (1 << CelestialParser.BDIFF) | (1 << CelestialParser.BGASLIMIT) | (1 << CelestialParser.BNUMBER) | (1 << CelestialParser.BTIMESTAMP) | (1 << CelestialParser.DEFAULT) | (1 << CelestialParser.DELETE) | (1 << CelestialParser.EMIT) | (1 << CelestialParser.EXISTS) | (1 << CelestialParser.FOR) | (1 << CelestialParser.FORALL) | (1 << CelestialParser.IF) | (1 << CelestialParser.INT_MIN) | (1 << CelestialParser.INT_MAX) | (1 << CelestialParser.ITE) | (1 << CelestialParser.LOG) | (1 << CelestialParser.NEW) | (1 << CelestialParser.PAYABLE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CelestialParser.REVERT - 65)) | (1 << (CelestialParser.SAFEADD - 65)) | (1 << (CelestialParser.SAFEDIV - 65)) | (1 << (CelestialParser.SAFEMOD - 65)) | (1 << (CelestialParser.SAFEMUL - 65)) | (1 << (CelestialParser.SAFESUB - 65)) | (1 << (CelestialParser.SEND - 65)) | (1 << (CelestialParser.SENDER - 65)) | (1 << (CelestialParser.THIS - 65)) | (1 << (CelestialParser.TXGASPRICE - 65)) | (1 << (CelestialParser.TXORIGIN - 65)) | (1 << (CelestialParser.UINT_MAX - 65)) | (1 << (CelestialParser.VALUE - 65)) | (1 << (CelestialParser.BoolLiteral - 65)) | (1 << (CelestialParser.IntLiteral - 65)) | (1 << (CelestialParser.NullLiteral - 65)) | (1 << (CelestialParser.StringLiteral - 65)) | (1 << (CelestialParser.LNOT - 65)) | (1 << (CelestialParser.SUB - 65)) | (1 << (CelestialParser.LBRACE - 65)) | (1 << (CelestialParser.LPAREN - 65)) | (1 << (CelestialParser.Iden - 65)))) != 0):
                    self.state = 448
                    self.statement()
                    self.state = 453
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 454
                self.match(CelestialParser.RBRACE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 455
                localctx.arrayName = self.lvalue(0)
                self.state = 456
                self.match(CelestialParser.DOT)
                self.state = 457
                self.match(CelestialParser.PUSH)
                self.state = 458
                self.match(CelestialParser.LPAREN)
                self.state = 459
                localctx.value = self.expr(0)
                self.state = 460
                self.match(CelestialParser.RPAREN)
                self.state = 461
                self.match(CelestialParser.SEMI)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 463
                localctx.arrayName = self.lvalue(0)
                self.state = 464
                self.match(CelestialParser.DOT)
                self.state = 465
                self.match(CelestialParser.POP)
                self.state = 466
                self.match(CelestialParser.LPAREN)
                self.state = 467
                self.match(CelestialParser.RPAREN)
                self.state = 468
                self.match(CelestialParser.SEMI)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 470
                self.match(CelestialParser.DELETE)
                self.state = 471
                self.match(CelestialParser.LPAREN)
                self.state = 472
                localctx.toDelete = self.lvalue(0)
                self.state = 475
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.COMMA:
                    self.state = 473
                    self.match(CelestialParser.COMMA)
                    self.state = 474
                    localctx.value = self.expr(0)


                self.state = 477
                self.match(CelestialParser.RPAREN)
                self.state = 478
                self.match(CelestialParser.SEMI)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 480
                self.match(CelestialParser.ASSERT)
                self.state = 481
                self.expr(0)
                self.state = 484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.COMMA:
                    self.state = 482
                    self.match(CelestialParser.COMMA)
                    self.state = 483
                    self.match(CelestialParser.StringLiteral)


                self.state = 486
                self.match(CelestialParser.SEMI)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 488
                localctx.assignTo = self.lvalue(0)
                self.state = 489
                self.match(CelestialParser.ASSIGN)
                self.state = 490
                self.match(CelestialParser.NEW)
                self.state = 491
                self.iden()
                self.state = 492
                self.match(CelestialParser.LPAREN)
                self.state = 494
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CelestialParser.ADDR) | (1 << CelestialParser.BALANCE) | (1 << CelestialParser.BCOINBASE) | (1 << CelestialParser.BDIFF) | (1 << CelestialParser.BGASLIMIT) | (1 << CelestialParser.BNUMBER) | (1 << CelestialParser.BTIMESTAMP) | (1 << CelestialParser.DEFAULT) | (1 << CelestialParser.EXISTS) | (1 << CelestialParser.FORALL) | (1 << CelestialParser.INT_MIN) | (1 << CelestialParser.INT_MAX) | (1 << CelestialParser.ITE) | (1 << CelestialParser.LOG) | (1 << CelestialParser.NEW) | (1 << CelestialParser.PAYABLE))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CelestialParser.SAFEADD - 67)) | (1 << (CelestialParser.SAFEDIV - 67)) | (1 << (CelestialParser.SAFEMOD - 67)) | (1 << (CelestialParser.SAFEMUL - 67)) | (1 << (CelestialParser.SAFESUB - 67)) | (1 << (CelestialParser.SENDER - 67)) | (1 << (CelestialParser.THIS - 67)) | (1 << (CelestialParser.TXGASPRICE - 67)) | (1 << (CelestialParser.TXORIGIN - 67)) | (1 << (CelestialParser.UINT_MAX - 67)) | (1 << (CelestialParser.VALUE - 67)) | (1 << (CelestialParser.BoolLiteral - 67)) | (1 << (CelestialParser.IntLiteral - 67)) | (1 << (CelestialParser.NullLiteral - 67)) | (1 << (CelestialParser.StringLiteral - 67)) | (1 << (CelestialParser.LNOT - 67)) | (1 << (CelestialParser.SUB - 67)) | (1 << (CelestialParser.LPAREN - 67)) | (1 << (CelestialParser.Iden - 67)))) != 0):
                    self.state = 493
                    self.rvalueList()


                self.state = 496
                self.match(CelestialParser.RPAREN)
                self.state = 497
                self.match(CelestialParser.SEMI)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 499
                self.expr(0)
                self.state = 500
                self.match(CelestialParser.DOT)
                self.state = 501
                self.match(CelestialParser.CALL)
                self.state = 502
                self.match(CelestialParser.LPAREN)
                self.state = 503
                self.rvalueList()
                self.state = 504
                self.match(CelestialParser.RPAREN)
                self.state = 505
                self.match(CelestialParser.SEMI)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 507
                self.match(CelestialParser.BOOL)
                self.state = 508
                self.iden()
                self.state = 509
                self.match(CelestialParser.ASSIGN)
                self.state = 510
                self.expr(0)
                self.state = 511
                self.match(CelestialParser.DOT)
                self.state = 512
                self.match(CelestialParser.CALL)
                self.state = 513
                self.match(CelestialParser.LPAREN)
                self.state = 514
                self.rvalueList()
                self.state = 515
                self.match(CelestialParser.RPAREN)
                self.state = 516
                self.match(CelestialParser.SEMI)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 518
                self.lvalue(0)
                self.state = 519
                self.match(CelestialParser.ASSIGN)
                self.state = 520
                self.expr(0)
                self.state = 521
                self.match(CelestialParser.DOT)
                self.state = 522
                self.match(CelestialParser.CALL)
                self.state = 523
                self.match(CelestialParser.LPAREN)
                self.state = 524
                self.rvalueList()
                self.state = 525
                self.match(CelestialParser.RPAREN)
                self.state = 526
                self.match(CelestialParser.SEMI)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 528
                localctx.otherContractInstance = self.lvalue(0)
                self.state = 529
                self.match(CelestialParser.DOT)
                self.state = 530
                localctx.method = self.iden()
                self.state = 531
                self.match(CelestialParser.LPAREN)
                self.state = 533
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CelestialParser.ADDR) | (1 << CelestialParser.BALANCE) | (1 << CelestialParser.BCOINBASE) | (1 << CelestialParser.BDIFF) | (1 << CelestialParser.BGASLIMIT) | (1 << CelestialParser.BNUMBER) | (1 << CelestialParser.BTIMESTAMP) | (1 << CelestialParser.DEFAULT) | (1 << CelestialParser.EXISTS) | (1 << CelestialParser.FORALL) | (1 << CelestialParser.INT_MIN) | (1 << CelestialParser.INT_MAX) | (1 << CelestialParser.ITE) | (1 << CelestialParser.LOG) | (1 << CelestialParser.NEW) | (1 << CelestialParser.PAYABLE))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CelestialParser.SAFEADD - 67)) | (1 << (CelestialParser.SAFEDIV - 67)) | (1 << (CelestialParser.SAFEMOD - 67)) | (1 << (CelestialParser.SAFEMUL - 67)) | (1 << (CelestialParser.SAFESUB - 67)) | (1 << (CelestialParser.SENDER - 67)) | (1 << (CelestialParser.THIS - 67)) | (1 << (CelestialParser.TXGASPRICE - 67)) | (1 << (CelestialParser.TXORIGIN - 67)) | (1 << (CelestialParser.UINT_MAX - 67)) | (1 << (CelestialParser.VALUE - 67)) | (1 << (CelestialParser.BoolLiteral - 67)) | (1 << (CelestialParser.IntLiteral - 67)) | (1 << (CelestialParser.NullLiteral - 67)) | (1 << (CelestialParser.StringLiteral - 67)) | (1 << (CelestialParser.LNOT - 67)) | (1 << (CelestialParser.SUB - 67)) | (1 << (CelestialParser.LPAREN - 67)) | (1 << (CelestialParser.Iden - 67)))) != 0):
                    self.state = 532
                    self.rvalueList()


                self.state = 535
                self.match(CelestialParser.RPAREN)
                self.state = 536
                self.match(CelestialParser.SEMI)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 538
                localctx.assignTo = self.lvalue(0)
                self.state = 539
                self.match(CelestialParser.ASSIGN)
                self.state = 540
                localctx.otherContractInstance = self.lvalue(0)
                self.state = 541
                self.match(CelestialParser.DOT)
                self.state = 542
                localctx.method = self.iden()
                self.state = 543
                self.match(CelestialParser.LPAREN)
                self.state = 545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CelestialParser.ADDR) | (1 << CelestialParser.BALANCE) | (1 << CelestialParser.BCOINBASE) | (1 << CelestialParser.BDIFF) | (1 << CelestialParser.BGASLIMIT) | (1 << CelestialParser.BNUMBER) | (1 << CelestialParser.BTIMESTAMP) | (1 << CelestialParser.DEFAULT) | (1 << CelestialParser.EXISTS) | (1 << CelestialParser.FORALL) | (1 << CelestialParser.INT_MIN) | (1 << CelestialParser.INT_MAX) | (1 << CelestialParser.ITE) | (1 << CelestialParser.LOG) | (1 << CelestialParser.NEW) | (1 << CelestialParser.PAYABLE))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CelestialParser.SAFEADD - 67)) | (1 << (CelestialParser.SAFEDIV - 67)) | (1 << (CelestialParser.SAFEMOD - 67)) | (1 << (CelestialParser.SAFEMUL - 67)) | (1 << (CelestialParser.SAFESUB - 67)) | (1 << (CelestialParser.SENDER - 67)) | (1 << (CelestialParser.THIS - 67)) | (1 << (CelestialParser.TXGASPRICE - 67)) | (1 << (CelestialParser.TXORIGIN - 67)) | (1 << (CelestialParser.UINT_MAX - 67)) | (1 << (CelestialParser.VALUE - 67)) | (1 << (CelestialParser.BoolLiteral - 67)) | (1 << (CelestialParser.IntLiteral - 67)) | (1 << (CelestialParser.NullLiteral - 67)) | (1 << (CelestialParser.StringLiteral - 67)) | (1 << (CelestialParser.LNOT - 67)) | (1 << (CelestialParser.SUB - 67)) | (1 << (CelestialParser.LPAREN - 67)) | (1 << (CelestialParser.Iden - 67)))) != 0):
                    self.state = 544
                    self.rvalueList()


                self.state = 547
                self.match(CelestialParser.RPAREN)
                self.state = 548
                self.match(CelestialParser.SEMI)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 550
                localctx.assignTo = self.lvalue(0)
                self.state = 551
                localctx.assignment = self.match(CelestialParser.ASSIGN)
                self.state = 552
                self.rvalue()
                self.state = 553
                self.match(CelestialParser.SEMI)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 555
                self.match(CelestialParser.IF)
                self.state = 556
                self.match(CelestialParser.LPAREN)
                self.state = 557
                self.expr(0)
                self.state = 558
                self.match(CelestialParser.RPAREN)
                self.state = 559
                localctx.thenBranch = self.statement()
                self.state = 561
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                if la_ == 1:
                    self.state = 560
                    self.elseStatement()


                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 563
                self.match(CelestialParser.FOR)
                self.state = 564
                self.match(CelestialParser.LPAREN)
                self.state = 565
                self.loopVarDecl()
                self.state = 570
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CelestialParser.COMMA:
                    self.state = 566
                    self.match(CelestialParser.COMMA)
                    self.state = 567
                    self.loopVarDecl()
                    self.state = 572
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 573
                self.match(CelestialParser.SEMI)
                self.state = 574
                self.expr(0)
                self.state = 575
                self.match(CelestialParser.SEMI)
                self.state = 576
                self.expr(0)
                self.state = 577
                self.match(CelestialParser.SEMI)
                self.state = 578
                self.match(CelestialParser.RPAREN)
                self.state = 579
                localctx.loopBody = self.statement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 581
                localctx.method = self.iden()
                self.state = 582
                self.match(CelestialParser.LPAREN)
                self.state = 584
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CelestialParser.ADDR) | (1 << CelestialParser.BALANCE) | (1 << CelestialParser.BCOINBASE) | (1 << CelestialParser.BDIFF) | (1 << CelestialParser.BGASLIMIT) | (1 << CelestialParser.BNUMBER) | (1 << CelestialParser.BTIMESTAMP) | (1 << CelestialParser.DEFAULT) | (1 << CelestialParser.EXISTS) | (1 << CelestialParser.FORALL) | (1 << CelestialParser.INT_MIN) | (1 << CelestialParser.INT_MAX) | (1 << CelestialParser.ITE) | (1 << CelestialParser.LOG) | (1 << CelestialParser.NEW) | (1 << CelestialParser.PAYABLE))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CelestialParser.SAFEADD - 67)) | (1 << (CelestialParser.SAFEDIV - 67)) | (1 << (CelestialParser.SAFEMOD - 67)) | (1 << (CelestialParser.SAFEMUL - 67)) | (1 << (CelestialParser.SAFESUB - 67)) | (1 << (CelestialParser.SENDER - 67)) | (1 << (CelestialParser.THIS - 67)) | (1 << (CelestialParser.TXGASPRICE - 67)) | (1 << (CelestialParser.TXORIGIN - 67)) | (1 << (CelestialParser.UINT_MAX - 67)) | (1 << (CelestialParser.VALUE - 67)) | (1 << (CelestialParser.BoolLiteral - 67)) | (1 << (CelestialParser.IntLiteral - 67)) | (1 << (CelestialParser.NullLiteral - 67)) | (1 << (CelestialParser.StringLiteral - 67)) | (1 << (CelestialParser.LNOT - 67)) | (1 << (CelestialParser.SUB - 67)) | (1 << (CelestialParser.LPAREN - 67)) | (1 << (CelestialParser.Iden - 67)))) != 0):
                    self.state = 583
                    self.rvalueList()


                self.state = 586
                self.match(CelestialParser.RPAREN)
                self.state = 587
                self.match(CelestialParser.SEMI)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 589
                self.match(CelestialParser.SEND)
                self.state = 590
                self.match(CelestialParser.LPAREN)
                self.state = 591
                localctx.contract = self.expr(0)
                self.state = 592
                self.match(CelestialParser.COMMA)
                self.state = 593
                self.match(CelestialParser.ETRANSFER)
                self.state = 594
                self.match(CelestialParser.COMMA)
                self.state = 595
                localctx.payload = self.expr(0)
                self.state = 596
                self.match(CelestialParser.RPAREN)
                self.state = 597
                self.match(CelestialParser.SEMI)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 599
                localctx.to = self.expr(0)
                self.state = 600
                self.match(CelestialParser.DOT)
                self.state = 601
                self.match(CelestialParser.TRANSFER)
                self.state = 602
                self.match(CelestialParser.LPAREN)
                self.state = 603
                localctx.amount = self.expr(0)
                self.state = 604
                self.match(CelestialParser.RPAREN)
                self.state = 605
                self.match(CelestialParser.SEMI)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 607
                self.match(CelestialParser.EMIT)
                self.state = 608
                localctx.event = self.iden()
                self.state = 609
                self.match(CelestialParser.LPAREN)
                self.state = 610
                localctx.payload = self.expr(0)
                self.state = 615
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CelestialParser.COMMA:
                    self.state = 611
                    self.match(CelestialParser.COMMA)
                    self.state = 612
                    localctx.payload = self.expr(0)
                    self.state = 617
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 618
                self.match(CelestialParser.RPAREN)
                self.state = 619
                self.match(CelestialParser.SEMI)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 621
                self.match(CelestialParser.REVERT)
                self.state = 622
                self.match(CelestialParser.LPAREN)
                self.state = 623
                self.match(CelestialParser.StringLiteral)
                self.state = 626
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CelestialParser.COMMA:
                    self.state = 624
                    self.match(CelestialParser.COMMA)
                    self.state = 625
                    self.rvalueList()


                self.state = 628
                self.match(CelestialParser.RPAREN)
                self.state = 629
                self.match(CelestialParser.SEMI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(CelestialParser.ELSE, 0)

        def statement(self):
            return self.getTypedRuleContext(CelestialParser.StatementContext,0)


        def getRuleIndex(self):
            return CelestialParser.RULE_elseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseStatement" ):
                listener.enterElseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseStatement" ):
                listener.exitElseStatement(self)




    def elseStatement(self):

        localctx = CelestialParser.ElseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_elseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            self.match(CelestialParser.ELSE)
            self.state = 633
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LvalueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdenContext
            self.field = None # IdenContext

        def iden(self):
            return self.getTypedRuleContext(CelestialParser.IdenContext,0)


        def lvalue(self):
            return self.getTypedRuleContext(CelestialParser.LvalueContext,0)


        def DOT(self):
            return self.getToken(CelestialParser.DOT, 0)

        def LBRACK(self):
            return self.getToken(CelestialParser.LBRACK, 0)

        def expr(self):
            return self.getTypedRuleContext(CelestialParser.ExprContext,0)


        def RBRACK(self):
            return self.getToken(CelestialParser.RBRACK, 0)

        def getRuleIndex(self):
            return CelestialParser.RULE_lvalue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLvalue" ):
                listener.enterLvalue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLvalue" ):
                listener.exitLvalue(self)



    def lvalue(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CelestialParser.LvalueContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 58
        self.enterRecursionRule(localctx, 58, self.RULE_lvalue, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 636
            localctx.name = self.iden()
            self._ctx.stop = self._input.LT(-1)
            self.state = 648
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,73,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 646
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
                    if la_ == 1:
                        localctx = CelestialParser.LvalueContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_lvalue)
                        self.state = 638
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 639
                        self.match(CelestialParser.DOT)
                        self.state = 640
                        localctx.field = self.iden()
                        pass

                    elif la_ == 2:
                        localctx = CelestialParser.LvalueContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_lvalue)
                        self.state = 641
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 642
                        self.match(CelestialParser.LBRACK)
                        self.state = 643
                        self.expr(0)
                        self.state = 644
                        self.match(CelestialParser.RBRACK)
                        pass

             
                self.state = 650
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LogcheckContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.event = None # IdenContext
            self.payload = None # ExprContext
            self.to = None # ExprContext

        def LPAREN(self):
            return self.getToken(CelestialParser.LPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.COMMA)
            else:
                return self.getToken(CelestialParser.COMMA, i)

        def RPAREN(self):
            return self.getToken(CelestialParser.RPAREN, 0)

        def iden(self):
            return self.getTypedRuleContext(CelestialParser.IdenContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.ExprContext)
            else:
                return self.getTypedRuleContext(CelestialParser.ExprContext,i)


        def ETRANSFER(self):
            return self.getToken(CelestialParser.ETRANSFER, 0)

        def getRuleIndex(self):
            return CelestialParser.RULE_logcheck

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogcheck" ):
                listener.enterLogcheck(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogcheck" ):
                listener.exitLogcheck(self)




    def logcheck(self):

        localctx = CelestialParser.LogcheckContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_logcheck)
        self._la = 0 # Token type
        try:
            self.state = 672
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 651
                self.match(CelestialParser.LPAREN)
                self.state = 652
                localctx.event = self.iden()
                self.state = 653
                self.match(CelestialParser.COMMA)
                self.state = 654
                localctx.payload = self.expr(0)
                self.state = 659
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CelestialParser.COMMA:
                    self.state = 655
                    self.match(CelestialParser.COMMA)
                    self.state = 656
                    localctx.payload = self.expr(0)
                    self.state = 661
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 662
                self.match(CelestialParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 664
                self.match(CelestialParser.LPAREN)
                self.state = 665
                localctx.to = self.expr(0)
                self.state = 666
                self.match(CelestialParser.COMMA)
                self.state = 667
                self.match(CelestialParser.ETRANSFER)
                self.state = 668
                self.match(CelestialParser.COMMA)
                self.state = 669
                localctx.payload = self.expr(0)
                self.state = 670
                self.match(CelestialParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.array = None # ExprContext
            self.lhs = None # ExprContext
            self.method = None # IdenContext
            self.op = None # Token
            self.rhs = None # ExprContext
            self.contractName = None # IdenContext
            self.instmap = None # IdenContext
            self.condition = None # ExprContext
            self.thenBranch = None # ExprContext
            self.elseBranch = None # ExprContext
            self.logName = None # PrimitiveContext
            self.field = None # IdenContext
            self.index = None # ExprContext

        def primitive(self):
            return self.getTypedRuleContext(CelestialParser.PrimitiveContext,0)


        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.LPAREN)
            else:
                return self.getToken(CelestialParser.LPAREN, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.ExprContext)
            else:
                return self.getTypedRuleContext(CelestialParser.ExprContext,i)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.RPAREN)
            else:
                return self.getToken(CelestialParser.RPAREN, i)

        def iden(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.IdenContext)
            else:
                return self.getTypedRuleContext(CelestialParser.IdenContext,i)


        def DOT(self):
            return self.getToken(CelestialParser.DOT, 0)

        def rvalueList(self):
            return self.getTypedRuleContext(CelestialParser.RvalueListContext,0)


        def FORALL(self):
            return self.getToken(CelestialParser.FORALL, 0)

        def funParamList(self):
            return self.getTypedRuleContext(CelestialParser.FunParamListContext,0)


        def EXISTS(self):
            return self.getToken(CelestialParser.EXISTS, 0)

        def SUB(self):
            return self.getToken(CelestialParser.SUB, 0)

        def LNOT(self):
            return self.getToken(CelestialParser.LNOT, 0)

        def SAFEMOD(self):
            return self.getToken(CelestialParser.SAFEMOD, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.COMMA)
            else:
                return self.getToken(CelestialParser.COMMA, i)

        def SAFEDIV(self):
            return self.getToken(CelestialParser.SAFEDIV, 0)

        def SAFEMUL(self):
            return self.getToken(CelestialParser.SAFEMUL, 0)

        def SAFEADD(self):
            return self.getToken(CelestialParser.SAFEADD, 0)

        def SAFESUB(self):
            return self.getToken(CelestialParser.SAFESUB, 0)

        def NEW(self):
            return self.getToken(CelestialParser.NEW, 0)

        def ADD(self):
            return self.getToken(CelestialParser.ADD, 0)

        def ITE(self):
            return self.getToken(CelestialParser.ITE, 0)

        def DEFAULT(self):
            return self.getToken(CelestialParser.DEFAULT, 0)

        def datatype(self):
            return self.getTypedRuleContext(CelestialParser.DatatypeContext,0)


        def logcheck(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.LogcheckContext)
            else:
                return self.getTypedRuleContext(CelestialParser.LogcheckContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.COLON)
            else:
                return self.getToken(CelestialParser.COLON, i)

        def PAYABLE(self):
            return self.getToken(CelestialParser.PAYABLE, 0)

        def MUL(self):
            return self.getToken(CelestialParser.MUL, 0)

        def DIV(self):
            return self.getToken(CelestialParser.DIV, 0)

        def MOD(self):
            return self.getToken(CelestialParser.MOD, 0)

        def PLUS(self):
            return self.getToken(CelestialParser.PLUS, 0)

        def LT(self):
            return self.getToken(CelestialParser.LT, 0)

        def GT(self):
            return self.getToken(CelestialParser.GT, 0)

        def GE(self):
            return self.getToken(CelestialParser.GE, 0)

        def LE(self):
            return self.getToken(CelestialParser.LE, 0)

        def IN(self):
            return self.getToken(CelestialParser.IN, 0)

        def EQ(self):
            return self.getToken(CelestialParser.EQ, 0)

        def NE(self):
            return self.getToken(CelestialParser.NE, 0)

        def LAND(self):
            return self.getToken(CelestialParser.LAND, 0)

        def LOR(self):
            return self.getToken(CelestialParser.LOR, 0)

        def IMPL(self):
            return self.getToken(CelestialParser.IMPL, 0)

        def BIMPL(self):
            return self.getToken(CelestialParser.BIMPL, 0)

        def LBRACK(self):
            return self.getToken(CelestialParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(CelestialParser.RBRACK, 0)

        def LENGTH(self):
            return self.getToken(CelestialParser.LENGTH, 0)

        def MAPUPD(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.MAPUPD)
            else:
                return self.getToken(CelestialParser.MAPUPD, i)

        def getRuleIndex(self):
            return CelestialParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CelestialParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 62
        self.enterRecursionRule(localctx, 62, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 807
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 675
                self.primitive()
                pass

            elif la_ == 2:
                self.state = 676
                self.match(CelestialParser.LPAREN)
                self.state = 677
                self.expr(0)
                self.state = 678
                self.match(CelestialParser.RPAREN)
                pass

            elif la_ == 3:
                self.state = 680
                self.iden()
                self.state = 681
                self.match(CelestialParser.DOT)
                self.state = 682
                localctx.method = self.iden()
                self.state = 683
                self.match(CelestialParser.LPAREN)
                self.state = 685
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CelestialParser.ADDR) | (1 << CelestialParser.BALANCE) | (1 << CelestialParser.BCOINBASE) | (1 << CelestialParser.BDIFF) | (1 << CelestialParser.BGASLIMIT) | (1 << CelestialParser.BNUMBER) | (1 << CelestialParser.BTIMESTAMP) | (1 << CelestialParser.DEFAULT) | (1 << CelestialParser.EXISTS) | (1 << CelestialParser.FORALL) | (1 << CelestialParser.INT_MIN) | (1 << CelestialParser.INT_MAX) | (1 << CelestialParser.ITE) | (1 << CelestialParser.LOG) | (1 << CelestialParser.NEW) | (1 << CelestialParser.PAYABLE))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CelestialParser.SAFEADD - 67)) | (1 << (CelestialParser.SAFEDIV - 67)) | (1 << (CelestialParser.SAFEMOD - 67)) | (1 << (CelestialParser.SAFEMUL - 67)) | (1 << (CelestialParser.SAFESUB - 67)) | (1 << (CelestialParser.SENDER - 67)) | (1 << (CelestialParser.THIS - 67)) | (1 << (CelestialParser.TXGASPRICE - 67)) | (1 << (CelestialParser.TXORIGIN - 67)) | (1 << (CelestialParser.UINT_MAX - 67)) | (1 << (CelestialParser.VALUE - 67)) | (1 << (CelestialParser.BoolLiteral - 67)) | (1 << (CelestialParser.IntLiteral - 67)) | (1 << (CelestialParser.NullLiteral - 67)) | (1 << (CelestialParser.StringLiteral - 67)) | (1 << (CelestialParser.LNOT - 67)) | (1 << (CelestialParser.SUB - 67)) | (1 << (CelestialParser.LPAREN - 67)) | (1 << (CelestialParser.Iden - 67)))) != 0):
                    self.state = 684
                    self.rvalueList()


                self.state = 687
                self.match(CelestialParser.RPAREN)
                pass

            elif la_ == 4:
                self.state = 689
                localctx.method = self.iden()
                self.state = 690
                self.match(CelestialParser.LPAREN)
                self.state = 692
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CelestialParser.ADDR) | (1 << CelestialParser.BALANCE) | (1 << CelestialParser.BCOINBASE) | (1 << CelestialParser.BDIFF) | (1 << CelestialParser.BGASLIMIT) | (1 << CelestialParser.BNUMBER) | (1 << CelestialParser.BTIMESTAMP) | (1 << CelestialParser.DEFAULT) | (1 << CelestialParser.EXISTS) | (1 << CelestialParser.FORALL) | (1 << CelestialParser.INT_MIN) | (1 << CelestialParser.INT_MAX) | (1 << CelestialParser.ITE) | (1 << CelestialParser.LOG) | (1 << CelestialParser.NEW) | (1 << CelestialParser.PAYABLE))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CelestialParser.SAFEADD - 67)) | (1 << (CelestialParser.SAFEDIV - 67)) | (1 << (CelestialParser.SAFEMOD - 67)) | (1 << (CelestialParser.SAFEMUL - 67)) | (1 << (CelestialParser.SAFESUB - 67)) | (1 << (CelestialParser.SENDER - 67)) | (1 << (CelestialParser.THIS - 67)) | (1 << (CelestialParser.TXGASPRICE - 67)) | (1 << (CelestialParser.TXORIGIN - 67)) | (1 << (CelestialParser.UINT_MAX - 67)) | (1 << (CelestialParser.VALUE - 67)) | (1 << (CelestialParser.BoolLiteral - 67)) | (1 << (CelestialParser.IntLiteral - 67)) | (1 << (CelestialParser.NullLiteral - 67)) | (1 << (CelestialParser.StringLiteral - 67)) | (1 << (CelestialParser.LNOT - 67)) | (1 << (CelestialParser.SUB - 67)) | (1 << (CelestialParser.LPAREN - 67)) | (1 << (CelestialParser.Iden - 67)))) != 0):
                    self.state = 691
                    self.rvalueList()


                self.state = 694
                self.match(CelestialParser.RPAREN)
                pass

            elif la_ == 5:
                self.state = 696
                self.match(CelestialParser.FORALL)
                self.state = 697
                self.match(CelestialParser.LPAREN)
                self.state = 698
                self.funParamList()
                self.state = 699
                self.match(CelestialParser.RPAREN)
                self.state = 700
                self.match(CelestialParser.LPAREN)
                self.state = 701
                self.expr(0)
                self.state = 702
                self.match(CelestialParser.RPAREN)
                pass

            elif la_ == 6:
                self.state = 704
                self.match(CelestialParser.EXISTS)
                self.state = 705
                self.match(CelestialParser.LPAREN)
                self.state = 706
                self.funParamList()
                self.state = 707
                self.match(CelestialParser.RPAREN)
                self.state = 708
                self.match(CelestialParser.LPAREN)
                self.state = 709
                self.expr(0)
                self.state = 710
                self.match(CelestialParser.RPAREN)
                pass

            elif la_ == 7:
                self.state = 712
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==CelestialParser.LNOT or _la==CelestialParser.SUB):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 713
                self.expr(21)
                pass

            elif la_ == 8:
                self.state = 714
                self.match(CelestialParser.SAFEMOD)
                self.state = 715
                self.match(CelestialParser.LPAREN)
                self.state = 716
                localctx.lhs = self.expr(0)
                self.state = 717
                self.match(CelestialParser.COMMA)
                self.state = 718
                localctx.rhs = self.expr(0)
                self.state = 719
                self.match(CelestialParser.RPAREN)
                pass

            elif la_ == 9:
                self.state = 721
                self.match(CelestialParser.SAFEDIV)
                self.state = 722
                self.match(CelestialParser.LPAREN)
                self.state = 723
                localctx.lhs = self.expr(0)
                self.state = 724
                self.match(CelestialParser.COMMA)
                self.state = 725
                localctx.rhs = self.expr(0)
                self.state = 726
                self.match(CelestialParser.RPAREN)
                pass

            elif la_ == 10:
                self.state = 728
                self.match(CelestialParser.SAFEMUL)
                self.state = 729
                self.match(CelestialParser.LPAREN)
                self.state = 730
                localctx.lhs = self.expr(0)
                self.state = 731
                self.match(CelestialParser.COMMA)
                self.state = 732
                localctx.rhs = self.expr(0)
                self.state = 733
                self.match(CelestialParser.RPAREN)
                pass

            elif la_ == 11:
                self.state = 735
                self.match(CelestialParser.SAFEADD)
                self.state = 736
                self.match(CelestialParser.LPAREN)
                self.state = 737
                localctx.lhs = self.expr(0)
                self.state = 738
                self.match(CelestialParser.COMMA)
                self.state = 739
                localctx.rhs = self.expr(0)
                self.state = 740
                self.match(CelestialParser.RPAREN)
                pass

            elif la_ == 12:
                self.state = 742
                self.match(CelestialParser.SAFESUB)
                self.state = 743
                self.match(CelestialParser.LPAREN)
                self.state = 744
                localctx.lhs = self.expr(0)
                self.state = 745
                self.match(CelestialParser.COMMA)
                self.state = 746
                localctx.rhs = self.expr(0)
                self.state = 747
                self.match(CelestialParser.RPAREN)
                pass

            elif la_ == 13:
                self.state = 749
                self.iden()
                self.state = 750
                self.match(CelestialParser.LPAREN)
                self.state = 751
                self.expr(0)
                self.state = 752
                self.match(CelestialParser.RPAREN)
                pass

            elif la_ == 14:
                self.state = 754
                self.match(CelestialParser.NEW)
                self.state = 755
                localctx.contractName = self.iden()
                self.state = 756
                self.match(CelestialParser.LPAREN)
                self.state = 758
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CelestialParser.ADDR) | (1 << CelestialParser.BALANCE) | (1 << CelestialParser.BCOINBASE) | (1 << CelestialParser.BDIFF) | (1 << CelestialParser.BGASLIMIT) | (1 << CelestialParser.BNUMBER) | (1 << CelestialParser.BTIMESTAMP) | (1 << CelestialParser.DEFAULT) | (1 << CelestialParser.EXISTS) | (1 << CelestialParser.FORALL) | (1 << CelestialParser.INT_MIN) | (1 << CelestialParser.INT_MAX) | (1 << CelestialParser.ITE) | (1 << CelestialParser.LOG) | (1 << CelestialParser.NEW) | (1 << CelestialParser.PAYABLE))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CelestialParser.SAFEADD - 67)) | (1 << (CelestialParser.SAFEDIV - 67)) | (1 << (CelestialParser.SAFEMOD - 67)) | (1 << (CelestialParser.SAFEMUL - 67)) | (1 << (CelestialParser.SAFESUB - 67)) | (1 << (CelestialParser.SENDER - 67)) | (1 << (CelestialParser.THIS - 67)) | (1 << (CelestialParser.TXGASPRICE - 67)) | (1 << (CelestialParser.TXORIGIN - 67)) | (1 << (CelestialParser.UINT_MAX - 67)) | (1 << (CelestialParser.VALUE - 67)) | (1 << (CelestialParser.BoolLiteral - 67)) | (1 << (CelestialParser.IntLiteral - 67)) | (1 << (CelestialParser.NullLiteral - 67)) | (1 << (CelestialParser.StringLiteral - 67)) | (1 << (CelestialParser.LNOT - 67)) | (1 << (CelestialParser.SUB - 67)) | (1 << (CelestialParser.LPAREN - 67)) | (1 << (CelestialParser.Iden - 67)))) != 0):
                    self.state = 757
                    self.rvalueList()


                self.state = 760
                self.match(CelestialParser.RPAREN)
                pass

            elif la_ == 15:
                self.state = 762
                localctx.instmap = self.iden()
                self.state = 763
                self.match(CelestialParser.DOT)
                self.state = 764
                self.match(CelestialParser.ADD)
                self.state = 765
                self.match(CelestialParser.LPAREN)
                self.state = 766
                self.match(CelestialParser.NEW)
                self.state = 767
                localctx.contractName = self.iden()
                self.state = 768
                self.match(CelestialParser.LPAREN)
                self.state = 770
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CelestialParser.ADDR) | (1 << CelestialParser.BALANCE) | (1 << CelestialParser.BCOINBASE) | (1 << CelestialParser.BDIFF) | (1 << CelestialParser.BGASLIMIT) | (1 << CelestialParser.BNUMBER) | (1 << CelestialParser.BTIMESTAMP) | (1 << CelestialParser.DEFAULT) | (1 << CelestialParser.EXISTS) | (1 << CelestialParser.FORALL) | (1 << CelestialParser.INT_MIN) | (1 << CelestialParser.INT_MAX) | (1 << CelestialParser.ITE) | (1 << CelestialParser.LOG) | (1 << CelestialParser.NEW) | (1 << CelestialParser.PAYABLE))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CelestialParser.SAFEADD - 67)) | (1 << (CelestialParser.SAFEDIV - 67)) | (1 << (CelestialParser.SAFEMOD - 67)) | (1 << (CelestialParser.SAFEMUL - 67)) | (1 << (CelestialParser.SAFESUB - 67)) | (1 << (CelestialParser.SENDER - 67)) | (1 << (CelestialParser.THIS - 67)) | (1 << (CelestialParser.TXGASPRICE - 67)) | (1 << (CelestialParser.TXORIGIN - 67)) | (1 << (CelestialParser.UINT_MAX - 67)) | (1 << (CelestialParser.VALUE - 67)) | (1 << (CelestialParser.BoolLiteral - 67)) | (1 << (CelestialParser.IntLiteral - 67)) | (1 << (CelestialParser.NullLiteral - 67)) | (1 << (CelestialParser.StringLiteral - 67)) | (1 << (CelestialParser.LNOT - 67)) | (1 << (CelestialParser.SUB - 67)) | (1 << (CelestialParser.LPAREN - 67)) | (1 << (CelestialParser.Iden - 67)))) != 0):
                    self.state = 769
                    self.rvalueList()


                self.state = 772
                self.match(CelestialParser.RPAREN)
                self.state = 773
                self.match(CelestialParser.RPAREN)
                pass

            elif la_ == 16:
                self.state = 775
                self.match(CelestialParser.ITE)
                self.state = 776
                self.match(CelestialParser.LPAREN)
                self.state = 777
                localctx.condition = self.expr(0)
                self.state = 778
                self.match(CelestialParser.COMMA)
                self.state = 779
                localctx.thenBranch = self.expr(0)
                self.state = 780
                self.match(CelestialParser.COMMA)
                self.state = 781
                localctx.elseBranch = self.expr(0)
                self.state = 782
                self.match(CelestialParser.RPAREN)
                pass

            elif la_ == 17:
                self.state = 784
                self.match(CelestialParser.DEFAULT)
                self.state = 785
                self.match(CelestialParser.LPAREN)
                self.state = 786
                self.datatype(0)
                self.state = 787
                self.match(CelestialParser.RPAREN)
                pass

            elif la_ == 18:
                self.state = 789
                self.logcheck()
                self.state = 795
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,80,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 790
                        self.match(CelestialParser.COLON)
                        self.state = 791
                        self.match(CelestialParser.COLON)
                        self.state = 792
                        self.logcheck() 
                    self.state = 797
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,80,self._ctx)

                self.state = 798
                self.match(CelestialParser.COLON)
                self.state = 799
                self.match(CelestialParser.COLON)
                self.state = 800
                localctx.logName = self.primitive()
                pass

            elif la_ == 19:
                self.state = 802
                self.match(CelestialParser.PAYABLE)
                self.state = 803
                self.match(CelestialParser.LPAREN)
                self.state = 804
                self.expr(0)
                self.state = 805
                self.match(CelestialParser.RPAREN)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 858
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,84,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 856
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                    if la_ == 1:
                        localctx = CelestialParser.ExprContext(self, _parentctx, _parentState)
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 809
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 810
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & ((1 << (CelestialParser.MUL - 106)) | (1 << (CelestialParser.DIV - 106)) | (1 << (CelestialParser.MOD - 106)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 811
                        localctx.rhs = self.expr(21)
                        pass

                    elif la_ == 2:
                        localctx = CelestialParser.ExprContext(self, _parentctx, _parentState)
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 812
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 813
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==CelestialParser.PLUS or _la==CelestialParser.SUB):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 814
                        localctx.rhs = self.expr(17)
                        pass

                    elif la_ == 3:
                        localctx = CelestialParser.ExprContext(self, _parentctx, _parentState)
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 815
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 816
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 41)) & ~0x3f) == 0 and ((1 << (_la - 41)) & ((1 << (CelestialParser.IN - 41)) | (1 << (CelestialParser.LE - 41)) | (1 << (CelestialParser.GE - 41)) | (1 << (CelestialParser.LT - 41)) | (1 << (CelestialParser.GT - 41)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 817
                        localctx.rhs = self.expr(14)
                        pass

                    elif la_ == 4:
                        localctx = CelestialParser.ExprContext(self, _parentctx, _parentState)
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 818
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 819
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==CelestialParser.EQ or _la==CelestialParser.NE):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 820
                        localctx.rhs = self.expr(13)
                        pass

                    elif la_ == 5:
                        localctx = CelestialParser.ExprContext(self, _parentctx, _parentState)
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 821
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 822
                        localctx.op = self.match(CelestialParser.LAND)
                        self.state = 823
                        localctx.rhs = self.expr(12)
                        pass

                    elif la_ == 6:
                        localctx = CelestialParser.ExprContext(self, _parentctx, _parentState)
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 824
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 825
                        localctx.op = self.match(CelestialParser.LOR)
                        self.state = 826
                        localctx.rhs = self.expr(11)
                        pass

                    elif la_ == 7:
                        localctx = CelestialParser.ExprContext(self, _parentctx, _parentState)
                        localctx.lhs = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 827
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 828
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==CelestialParser.IMPL or _la==CelestialParser.BIMPL):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 829
                        localctx.rhs = self.expr(10)
                        pass

                    elif la_ == 8:
                        localctx = CelestialParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 830
                        if not self.precpred(self._ctx, 27):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 27)")
                        self.state = 831
                        self.match(CelestialParser.DOT)
                        self.state = 832
                        localctx.field = self.iden()
                        pass

                    elif la_ == 9:
                        localctx = CelestialParser.ExprContext(self, _parentctx, _parentState)
                        localctx.array = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 833
                        if not self.precpred(self._ctx, 26):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 26)")
                        self.state = 834
                        self.match(CelestialParser.LBRACK)
                        self.state = 835
                        localctx.index = self.expr(0)
                        self.state = 836
                        self.match(CelestialParser.RBRACK)
                        pass

                    elif la_ == 10:
                        localctx = CelestialParser.ExprContext(self, _parentctx, _parentState)
                        localctx.array = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 838
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 839
                        self.match(CelestialParser.DOT)
                        self.state = 840
                        self.match(CelestialParser.LENGTH)
                        self.state = 841
                        self.match(CelestialParser.LPAREN)
                        self.state = 842
                        self.match(CelestialParser.RPAREN)
                        pass

                    elif la_ == 11:
                        localctx = CelestialParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 843
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 844
                        self.match(CelestialParser.MAPUPD)
                        self.state = 845
                        self.expr(0)
                        self.state = 853
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 846
                                self.match(CelestialParser.COMMA)
                                self.state = 847
                                self.expr(0)
                                self.state = 848
                                self.match(CelestialParser.MAPUPD)
                                self.state = 849
                                self.expr(0) 
                            self.state = 855
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

                        pass

             
                self.state = 860
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,84,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimitiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iden(self):
            return self.getTypedRuleContext(CelestialParser.IdenContext,0)


        def VALUE(self):
            return self.getToken(CelestialParser.VALUE, 0)

        def BALANCE(self):
            return self.getToken(CelestialParser.BALANCE, 0)

        def SENDER(self):
            return self.getToken(CelestialParser.SENDER, 0)

        def TXGASPRICE(self):
            return self.getToken(CelestialParser.TXGASPRICE, 0)

        def TXORIGIN(self):
            return self.getToken(CelestialParser.TXORIGIN, 0)

        def BCOINBASE(self):
            return self.getToken(CelestialParser.BCOINBASE, 0)

        def BDIFF(self):
            return self.getToken(CelestialParser.BDIFF, 0)

        def BGASLIMIT(self):
            return self.getToken(CelestialParser.BGASLIMIT, 0)

        def BNUMBER(self):
            return self.getToken(CelestialParser.BNUMBER, 0)

        def BTIMESTAMP(self):
            return self.getToken(CelestialParser.BTIMESTAMP, 0)

        def LOG(self):
            return self.getToken(CelestialParser.LOG, 0)

        def INT_MIN(self):
            return self.getToken(CelestialParser.INT_MIN, 0)

        def INT_MAX(self):
            return self.getToken(CelestialParser.INT_MAX, 0)

        def UINT_MAX(self):
            return self.getToken(CelestialParser.UINT_MAX, 0)

        def NEW(self):
            return self.getToken(CelestialParser.NEW, 0)

        def LPAREN(self):
            return self.getToken(CelestialParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(CelestialParser.RPAREN, 0)

        def BoolLiteral(self):
            return self.getToken(CelestialParser.BoolLiteral, 0)

        def IntLiteral(self):
            return self.getToken(CelestialParser.IntLiteral, 0)

        def NullLiteral(self):
            return self.getToken(CelestialParser.NullLiteral, 0)

        def StringLiteral(self):
            return self.getToken(CelestialParser.StringLiteral, 0)

        def THIS(self):
            return self.getToken(CelestialParser.THIS, 0)

        def ADDR(self):
            return self.getToken(CelestialParser.ADDR, 0)

        def getRuleIndex(self):
            return CelestialParser.RULE_primitive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitive" ):
                listener.enterPrimitive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitive" ):
                listener.exitPrimitive(self)




    def primitive(self):

        localctx = CelestialParser.PrimitiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_primitive)
        try:
            self.state = 903
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 861
                self.iden()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 862
                self.match(CelestialParser.VALUE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 863
                self.match(CelestialParser.BALANCE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 864
                self.match(CelestialParser.SENDER)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 865
                self.match(CelestialParser.TXGASPRICE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 866
                self.match(CelestialParser.TXORIGIN)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 867
                self.match(CelestialParser.BCOINBASE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 868
                self.match(CelestialParser.BDIFF)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 869
                self.match(CelestialParser.BGASLIMIT)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 870
                self.match(CelestialParser.BNUMBER)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 871
                self.match(CelestialParser.BTIMESTAMP)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 872
                self.match(CelestialParser.LOG)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 873
                self.match(CelestialParser.INT_MIN)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 874
                self.match(CelestialParser.INT_MAX)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 875
                self.match(CelestialParser.UINT_MAX)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 876
                self.match(CelestialParser.NEW)
                self.state = 877
                self.match(CelestialParser.LPAREN)
                self.state = 878
                self.iden()
                self.state = 879
                self.match(CelestialParser.RPAREN)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 881
                self.match(CelestialParser.NEW)
                self.state = 882
                self.match(CelestialParser.LPAREN)
                self.state = 883
                self.match(CelestialParser.BALANCE)
                self.state = 884
                self.match(CelestialParser.RPAREN)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 885
                self.match(CelestialParser.NEW)
                self.state = 886
                self.match(CelestialParser.LPAREN)
                self.state = 887
                self.match(CelestialParser.LOG)
                self.state = 888
                self.match(CelestialParser.RPAREN)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 889
                self.match(CelestialParser.BoolLiteral)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 890
                self.match(CelestialParser.IntLiteral)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 891
                self.match(CelestialParser.NullLiteral)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 892
                self.match(CelestialParser.StringLiteral)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 893
                self.match(CelestialParser.THIS)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 894
                self.match(CelestialParser.ADDR)
                self.state = 895
                self.match(CelestialParser.LPAREN)
                self.state = 896
                self.match(CelestialParser.THIS)
                self.state = 897
                self.match(CelestialParser.RPAREN)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 898
                self.match(CelestialParser.ADDR)
                self.state = 899
                self.match(CelestialParser.LPAREN)
                self.state = 900
                self.iden()
                self.state = 901
                self.match(CelestialParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnnamedTupleBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._rvalue = None # RvalueContext
            self.fields = list() # of RvalueContexts

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.COMMA)
            else:
                return self.getToken(CelestialParser.COMMA, i)

        def rvalue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.RvalueContext)
            else:
                return self.getTypedRuleContext(CelestialParser.RvalueContext,i)


        def getRuleIndex(self):
            return CelestialParser.RULE_unnamedTupleBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnnamedTupleBody" ):
                listener.enterUnnamedTupleBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnnamedTupleBody" ):
                listener.exitUnnamedTupleBody(self)




    def unnamedTupleBody(self):

        localctx = CelestialParser.UnnamedTupleBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_unnamedTupleBody)
        self._la = 0 # Token type
        try:
            self.state = 915
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 905
                localctx._rvalue = self.rvalue()
                localctx.fields.append(localctx._rvalue)
                self.state = 906
                self.match(CelestialParser.COMMA)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 908
                localctx._rvalue = self.rvalue()
                localctx.fields.append(localctx._rvalue)
                self.state = 911 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 909
                    self.match(CelestialParser.COMMA)
                    self.state = 910
                    localctx._rvalue = self.rvalue()
                    localctx.fields.append(localctx._rvalue)
                    self.state = 913 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==CelestialParser.COMMA):
                        break

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedTupleBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._iden = None # IdenContext
            self.names = list() # of IdenContexts
            self._rvalue = None # RvalueContext
            self.values = list() # of RvalueContexts

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.ASSIGN)
            else:
                return self.getToken(CelestialParser.ASSIGN, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.COMMA)
            else:
                return self.getToken(CelestialParser.COMMA, i)

        def iden(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.IdenContext)
            else:
                return self.getTypedRuleContext(CelestialParser.IdenContext,i)


        def rvalue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.RvalueContext)
            else:
                return self.getTypedRuleContext(CelestialParser.RvalueContext,i)


        def getRuleIndex(self):
            return CelestialParser.RULE_namedTupleBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedTupleBody" ):
                listener.enterNamedTupleBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedTupleBody" ):
                listener.exitNamedTupleBody(self)




    def namedTupleBody(self):

        localctx = CelestialParser.NamedTupleBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_namedTupleBody)
        self._la = 0 # Token type
        try:
            self.state = 934
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 917
                localctx._iden = self.iden()
                localctx.names.append(localctx._iden)
                self.state = 918
                self.match(CelestialParser.ASSIGN)
                self.state = 919
                localctx._rvalue = self.rvalue()
                localctx.values.append(localctx._rvalue)
                self.state = 920
                self.match(CelestialParser.COMMA)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 922
                localctx._iden = self.iden()
                localctx.names.append(localctx._iden)
                self.state = 923
                self.match(CelestialParser.ASSIGN)
                self.state = 924
                localctx._rvalue = self.rvalue()
                localctx.values.append(localctx._rvalue)
                self.state = 930 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 925
                    self.match(CelestialParser.COMMA)
                    self.state = 926
                    localctx._iden = self.iden()
                    localctx.names.append(localctx._iden)
                    self.state = 927
                    self.match(CelestialParser.ASSIGN)
                    self.state = 928
                    localctx._rvalue = self.rvalue()
                    localctx.values.append(localctx._rvalue)
                    self.state = 932 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==CelestialParser.COMMA):
                        break

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RvalueListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rvalue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CelestialParser.RvalueContext)
            else:
                return self.getTypedRuleContext(CelestialParser.RvalueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(CelestialParser.COMMA)
            else:
                return self.getToken(CelestialParser.COMMA, i)

        def getRuleIndex(self):
            return CelestialParser.RULE_rvalueList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRvalueList" ):
                listener.enterRvalueList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRvalueList" ):
                listener.exitRvalueList(self)




    def rvalueList(self):

        localctx = CelestialParser.RvalueListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_rvalueList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 936
            self.rvalue()
            self.state = 941
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CelestialParser.COMMA:
                self.state = 937
                self.match(CelestialParser.COMMA)
                self.state = 938
                self.rvalue()
                self.state = 943
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RvalueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(CelestialParser.ExprContext,0)


        def getRuleIndex(self):
            return CelestialParser.RULE_rvalue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRvalue" ):
                listener.enterRvalue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRvalue" ):
                listener.exitRvalue(self)




    def rvalue(self):

        localctx = CelestialParser.RvalueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_rvalue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 944
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[2] = self.datatype_sempred
        self._predicates[29] = self.lvalue_sempred
        self._predicates[31] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def datatype_sempred(self, localctx:DatatypeContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 15)
         

    def lvalue_sempred(self, localctx:LvalueContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 1)
         

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 27)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 26)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 8)
         




